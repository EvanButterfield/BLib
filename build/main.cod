; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31935.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	main
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa35
PUBLIC	__real@3ec8b439
PUBLIC	__real@3f158106
PUBLIC	__real@3f400000
PUBLIC	__real@3f6dd2f2
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@41200000
PUBLIC	__real@41c80000
PUBLIC	__real@42480000
PUBLIC	__real@42c80000
PUBLIC	__real@43160000
PUBLIC	__real@80000000
PUBLIC	__real@bf000000
PUBLIC	__real@bf400000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageW:PROC
EXTRN	__imp_PeekMessageW:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_LoadCursorW:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	D3DCompile:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	cosf:PROC
EXTRN	sinf:PROC
EXTRN	sqrtf:PROC
EXTRN	IID_IDXGIDevice:BYTE
EXTRN	IID_ID3D11Texture2D:BYTE
EXTRN	IID_ID3D11InfoQueue:BYTE
EXTRN	IID_IDXGIFactory2:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
ShouldClose DD	01H DUP (?)
PlatformData DB	028H DUP (?)
	ALIGN	8

LastCounter DQ	01H DUP (?)
RendererData DB	080H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$V3Scale DD imagerel V3Scale
	DD	imagerel V3Scale+145
	DD	imagerel $unwind$V3Scale
$pdata$V3MultiplyDot DD imagerel V3MultiplyDot
	DD	imagerel V3MultiplyDot+95
	DD	imagerel $unwind$V3MultiplyDot
$pdata$V3Length DD imagerel V3Length
	DD	imagerel V3Length+128
	DD	imagerel $unwind$V3Length
$pdata$V3Normalize DD imagerel V3Normalize
	DD	imagerel V3Normalize+275
	DD	imagerel $unwind$V3Normalize
$pdata$V4Add DD	imagerel V4Add
	DD	imagerel V4Add+181
	DD	imagerel $unwind$V4Add
$pdata$V4Scale DD imagerel V4Scale
	DD	imagerel V4Scale+167
	DD	imagerel $unwind$V4Scale
$pdata$Mat4Identity DD imagerel Mat4Identity
	DD	imagerel Mat4Identity+233
	DD	imagerel $unwind$Mat4Identity
$pdata$Mat4Multiply DD imagerel Mat4Multiply
	DD	imagerel Mat4Multiply+5034
	DD	imagerel $unwind$Mat4Multiply
$pdata$CreateOrthographic DD imagerel CreateOrthographic
	DD	imagerel CreateOrthographic+535
	DD	imagerel $unwind$CreateOrthographic
$pdata$TranslateMat4 DD imagerel TranslateMat4
	DD	imagerel TranslateMat4+681
	DD	imagerel $unwind$TranslateMat4
$pdata$RotateMat4 DD imagerel RotateMat4
	DD	imagerel RotateMat4+2821
	DD	imagerel $unwind$RotateMat4
$pdata$ScaleMat4 DD imagerel ScaleMat4
	DD	imagerel ScaleMat4+313
	DD	imagerel $unwind$ScaleMat4
$pdata$CreateTransform DD imagerel CreateTransform
	DD	imagerel CreateTransform+489
	DD	imagerel $unwind$CreateTransform
$pdata$Win32WindowProc DD imagerel Win32WindowProc
	DD	imagerel Win32WindowProc+101
	DD	imagerel $unwind$Win32WindowProc
$pdata$Win32GetWallClock DD imagerel Win32GetWallClock
	DD	imagerel Win32GetWallClock+25
	DD	imagerel $unwind$Win32GetWallClock
$pdata$Win32GetSecondsElapsed DD imagerel Win32GetSecondsElapsed
	DD	imagerel Win32GetSecondsElapsed+63
	DD	imagerel $unwind$Win32GetSecondsElapsed
$pdata$InitializePlatform DD imagerel InitializePlatform
	DD	imagerel InitializePlatform+360
	DD	imagerel $unwind$InitializePlatform
$pdata$UpdatePlatform DD imagerel UpdatePlatform
	DD	imagerel UpdatePlatform+209
	DD	imagerel $unwind$UpdatePlatform
$pdata$InitializeRenderer DD imagerel InitializeRenderer
	DD	imagerel InitializeRenderer+2678
	DD	imagerel $unwind$InitializeRenderer
$pdata$CreateRendererObject DD imagerel CreateRendererObject
	DD	imagerel CreateRendererObject+156
	DD	imagerel $unwind$CreateRendererObject
$pdata$BeginDrawing DD imagerel BeginDrawing
	DD	imagerel BeginDrawing+1212
	DD	imagerel $unwind$BeginDrawing
$pdata$DrawObject DD imagerel DrawObject
	DD	imagerel DrawObject+522
	DD	imagerel $unwind$DrawObject
$pdata$EndDrawing DD imagerel EndDrawing
	DD	imagerel EndDrawing+98
	DD	imagerel $unwind$EndDrawing
$pdata$main DD	imagerel $LN5
	DD	imagerel $LN5+698
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f6dd2f2
CONST	SEGMENT
__real@3f6dd2f2 DD 03f6dd2f2r			; 0.929
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f158106
CONST	SEGMENT
__real@3f158106 DD 03f158106r			; 0.584
CONST	ENDS
;	COMDAT __real@3ec8b439
CONST	SEGMENT
__real@3ec8b439 DD 03ec8b439r			; 0.392
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
$SG119072 DB	'B', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, 00H, 00H
$SG142689 DB	'POSITION', 00H
	ORG $+7
$SG142691 DB	'TEXCOORD', 00H
	ORG $+3
$SG142693 DB	'COLOR', 00H
	ORG $+2
$SG142695 DB	'vs_5_0', 00H
	ORG $+5
$SG142694 DB	'#line 84', 0aH, 'struct vs_input ', 0aH, '{', 0aH, 'floa'
	DB	't2 Position : POSITION;', 0aH, 'float2 Uv       : TEXCOORD;', 0aH
	DB	'float3 Color    : COLOR;', 0aH, '};', 0aH, 'struct ps_input ', 0aH
	DB	'{', 0aH, 'float4 Position : SV_POSITION;', 0aH, 'float2 Uv   '
	DB	'    : TEXCOORD;', 0aH, 'float4 Color    : COLOR;', 0aH, '};', 0aH
	DB	'cbuffer cbuffer0 : register(b0)', 0aH, '{', 0aH, 'row_major f'
	DB	'loat4x4 Transform;', 0aH, '}', 0aH, 'sampler sampler0 : regis'
	DB	'ter(s0);', 0aH, 'Texture2D<float4> texture0 : register(t0);', 0aH
	DB	'ps_input Vertex(vs_input Input)', 0aH, '{', 0aH, 'ps_input Ou'
	DB	'tput;', 0aH, 'Output.Position = mul(float4(Input.Position, 0,'
	DB	' 1), Transform);', 0aH, 'Output.Position.z = 0;', 0aH, 'Outpu'
	DB	't.Uv = Input.Uv;', 0aH, 'Output.Color = float4(Input.Color, 1'
	DB	');', 0aH, 'return Output;', 0aH, '}', 0aH, 'float4 Pixel(ps_i'
	DB	'nput Input) : SV_TARGET ', 0aH, '{', 0aH, 'float4 Texture = t'
	DB	'exture0.Sample(sampler0, Input.Uv);', 0aH, 'return Input.Colo'
	DB	'r*Texture;', 0aH, '}', 0aH, 00H
	ORG $+3
$SG142696 DB	'Vertex', 00H
	ORG $+5
$SG142699 DB	'Failed to compile vertex shader!', 00H
	ORG $+3
$SG142700 DB	'ps_5_0', 00H
	ORG $+1
$SG142701 DB	'Pixel', 00H
	ORG $+6
$SG142704 DB	'Failed to compile pixel shader', 00H
	ORG $+1
$SG142734 DB	'Failed to resize swap chain!', 00H
	ORG $+3
$SG142769 DB	'Failed to present swap chain. Device lost?', 00H
	ORG $+5
$SG142783 DB	'T', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'G', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 'd', 00H, 's', 00H, 00H, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	011H
	DD	02a2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:DrawObject
	DD	028H
	DD	01f0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:BeginDrawing
	DD	013H
	DD	04a3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:CreateRendererObject
	DD	018H
	DD	089H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitializeRenderer
	DD	01fH
	DD	0a5cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:UpdatePlatform
	DD	011H
	DD	0b9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:CreateTransform
	DD	028H
	DD	01cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:RotateMat4
	DD	023H
	DD	0aebH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TranslateMat4
	DD	01dH
	DD	028fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:CreateOrthographic
	DD	02aH
	DD	01fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Mat4Multiply
	DD	01fH
	DD	01396H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Mat4Identity
	DD	015H
	DD	0d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:V4Scale
	DD	020H
	DD	093H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:V4Add
	DD	01fH
	DD	0a1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:V3Normalize
	DD	01dH
	DD	0f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:V3Scale
	DD	020H
	DD	07dH
voltbl	ENDS
xdata	SEGMENT
$unwind$V3Scale DD 032519H
	DD	070124216H
	DD	06011H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$V3MultiplyDot DD 010e01H
	DD	0220eH
$unwind$V3Length DD 030b01H
	DD	07007a20bH
	DD	06006H
$unwind$V3Normalize DD 042519H
	DD	0130113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$V4Add DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$V4Scale DD 032519H
	DD	070124216H
	DD	06011H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$Mat4Identity DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$Mat4Multiply DD 032419H
	DD	07011a215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$CreateOrthographic DD 043219H
	DD	0170120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$TranslateMat4 DD 042519H
	DD	02d0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$RotateMat4 DD 042b19H
	DD	07b0119H
	DD	060117012H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
$unwind$ScaleMat4 DD 041301H
	DD	0110113H
	DD	0600b700cH
$unwind$CreateTransform DD 043019H
	DD	029011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$Win32WindowProc DD 011701H
	DD	06217H
$unwind$Win32GetWallClock DD 010401H
	DD	06204H
$unwind$Win32GetSecondsElapsed DD 010e01H
	DD	0220eH
$unwind$InitializePlatform DD 031501H
	DD	01a0115H
	DD	0700eH
$unwind$UpdatePlatform DD 021919H
	DD	0130107H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$InitializeRenderer DD 042719H
	DD	0d30115H
	DD	0600d700eH
	DD	imagerel __GSHandlerCheck
	DD	0680H
$unwind$CreateRendererObject DD 021d19H
	DD	0700ab20eH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$BeginDrawing DD 031b19H
	DD	0160109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$DrawObject DD 043019H
	DD	03f011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$EndDrawing DD 010401H
	DD	06204H
$unwind$main DD	021919H
	DD	01b0107H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
; Function compile flags: /Odtp
; File W:\BLib\testing_grounds\main.c
_TEXT	SEGMENT
Angle$ = 32
X$ = 36
DeltaTime$1 = 40
Object$ = 48
Scale$2 = 56
Position$3 = 64
Scale2$4 = 72
Position2$5 = 80
Data$ = 96
__$ArrayPad$ = 192
main	PROC

; 4    : {

$LN5:
  00000	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5    :     InitializePlatform(800, 450, L"Testing Grounds");

  00019	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG142783
  00020	ba c2 01 00 00	 mov	 edx, 450		; 000001c2H
  00025	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  0002a	e8 00 00 00 00	 call	 InitializePlatform

; 6    :     InitializeRenderer(0.01f, 100.0f);

  0002f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0003f	e8 00 00 00 00	 call	 InitializeRenderer

; 7    :     
; 8    :     struct vertex Data[] =

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  0004c	f3 0f 11 44 24
	60		 movss	 DWORD PTR Data$[rsp], xmm0
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  0005a	f3 0f 11 44 24
	64		 movss	 DWORD PTR Data$[rsp+4], xmm0
  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  00068	f3 0f 11 44 24
	68		 movss	 DWORD PTR Data$[rsp+8], xmm0
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00076	f3 0f 11 44 24
	6c		 movss	 DWORD PTR Data$[rsp+12], xmm0
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00084	f3 0f 11 44 24
	70		 movss	 DWORD PTR Data$[rsp+16], xmm0
  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	f3 0f 11 44 24
	74		 movss	 DWORD PTR Data$[rsp+20], xmm0
  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	f3 0f 11 44 24
	78		 movss	 DWORD PTR Data$[rsp+24], xmm0
  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f400000
  000a4	f3 0f 11 44 24
	7c		 movss	 DWORD PTR Data$[rsp+28], xmm0
  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  000b2	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR Data$[rsp+32], xmm0
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f3 0f 11 84 24
	84 00 00 00	 movss	 DWORD PTR Data$[rsp+36], xmm0
  000c7	0f 57 c0	 xorps	 xmm0, xmm0
  000ca	f3 0f 11 84 24
	88 00 00 00	 movss	 DWORD PTR Data$[rsp+40], xmm0
  000d3	0f 57 c0	 xorps	 xmm0, xmm0
  000d6	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR Data$[rsp+44], xmm0
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000e7	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR Data$[rsp+48], xmm0
  000f0	0f 57 c0	 xorps	 xmm0, xmm0
  000f3	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR Data$[rsp+52], xmm0
  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00104	f3 0f 11 84 24
	98 00 00 00	 movss	 DWORD PTR Data$[rsp+56], xmm0
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00115	f3 0f 11 84 24
	9c 00 00 00	 movss	 DWORD PTR Data$[rsp+60], xmm0
  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00126	f3 0f 11 84 24
	a0 00 00 00	 movss	 DWORD PTR Data$[rsp+64], xmm0
  0012f	0f 57 c0	 xorps	 xmm0, xmm0
  00132	f3 0f 11 84 24
	a4 00 00 00	 movss	 DWORD PTR Data$[rsp+68], xmm0
  0013b	0f 57 c0	 xorps	 xmm0, xmm0
  0013e	f3 0f 11 84 24
	a8 00 00 00	 movss	 DWORD PTR Data$[rsp+72], xmm0
  00147	0f 57 c0	 xorps	 xmm0, xmm0
  0014a	f3 0f 11 84 24
	ac 00 00 00	 movss	 DWORD PTR Data$[rsp+76], xmm0
  00153	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015b	f3 0f 11 84 24
	b0 00 00 00	 movss	 DWORD PTR Data$[rsp+80], xmm0

; 9    :     {
; 10   :         { { -0.00f, +0.75f }, { 25.0f, 50.0f }, { 1, 0, 0 } },
; 11   :         { { +0.75f, -0.50f }, {  0.0f,  0.0f }, { 0, 1, 0 } },
; 12   :         { { -0.75f, -0.50f }, { 50.0f,  0.0f }, { 0, 0, 1 } }
; 13   :     };
; 14   :     
; 15   :     renderer_object Object = CreateRendererObject(Data, sizeof(Data));

  00164	ba 54 00 00 00	 mov	 edx, 84			; 00000054H
  00169	48 8d 4c 24 60	 lea	 rcx, QWORD PTR Data$[rsp]
  0016e	e8 00 00 00 00	 call	 CreateRendererObject
  00173	48 89 44 24 30	 mov	 QWORD PTR Object$[rsp], rax

; 16   :     
; 17   :     f32 X = 0.0f;

  00178	0f 57 c0	 xorps	 xmm0, xmm0
  0017b	f3 0f 11 44 24
	24		 movss	 DWORD PTR X$[rsp], xmm0

; 18   :     f32 Angle = 0.0f;

  00181	0f 57 c0	 xorps	 xmm0, xmm0
  00184	f3 0f 11 44 24
	20		 movss	 DWORD PTR Angle$[rsp], xmm0
$LN2@main:

; 19   :     
; 20   :     while(!ShouldClose)

  0018a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ShouldClose, 0
  00191	0f 85 09 01 00
	00		 jne	 $LN3@main

; 21   :     {
; 22   :         f32 DeltaTime = UpdatePlatform();

  00197	e8 00 00 00 00	 call	 UpdatePlatform
  0019c	f3 0f 11 44 24
	28		 movss	 DWORD PTR DeltaTime$1[rsp], xmm0

; 23   :         
; 24   :         X += DeltaTime*100.0f;

  001a2	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR DeltaTime$1[rsp]
  001a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42c80000
  001b0	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR X$[rsp]
  001b6	f3 0f 58 c8	 addss	 xmm1, xmm0
  001ba	0f 28 c1	 movaps	 xmm0, xmm1
  001bd	f3 0f 11 44 24
	24		 movss	 DWORD PTR X$[rsp], xmm0

; 25   :         Angle += 10.0f*DeltaTime;

  001c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  001cb	f3 0f 59 44 24
	28		 mulss	 xmm0, DWORD PTR DeltaTime$1[rsp]
  001d1	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR Angle$[rsp]
  001d7	f3 0f 58 c8	 addss	 xmm1, xmm0
  001db	0f 28 c1	 movaps	 xmm0, xmm1
  001de	f3 0f 11 44 24
	20		 movss	 DWORD PTR Angle$[rsp], xmm0

; 26   :         
; 27   :         BeginDrawing();

  001e4	e8 00 00 00 00	 call	 BeginDrawing

; 28   :         {
; 29   :             v2 Position = {X, 100.0f};

  001e9	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR X$[rsp]
  001ef	f3 0f 11 44 24
	40		 movss	 DWORD PTR Position$3[rsp], xmm0
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  001fd	f3 0f 11 44 24
	44		 movss	 DWORD PTR Position$3[rsp+4], xmm0

; 30   :             v2 Scale = {150.0f, 100.0f};

  00203	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  0020b	f3 0f 11 44 24
	38		 movss	 DWORD PTR Scale$2[rsp], xmm0
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00219	f3 0f 11 44 24
	3c		 movss	 DWORD PTR Scale$2[rsp+4], xmm0

; 31   :             DrawObject(Object, Position, Scale, Angle*2.0f);

  0021f	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR Angle$[rsp]
  00225	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0022d	0f 28 d8	 movaps	 xmm3, xmm0
  00230	4c 8b 44 24 38	 mov	 r8, QWORD PTR Scale$2[rsp]
  00235	48 8b 54 24 40	 mov	 rdx, QWORD PTR Position$3[rsp]
  0023a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Object$[rsp]
  0023f	e8 00 00 00 00	 call	 DrawObject

; 32   :             
; 33   :             v2 Position2 = {100.0f, 100.0f};

  00244	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0024c	f3 0f 11 44 24
	50		 movss	 DWORD PTR Position2$5[rsp], xmm0
  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0025a	f3 0f 11 44 24
	54		 movss	 DWORD PTR Position2$5[rsp+4], xmm0

; 34   :             v2 Scale2 = {50.0f, 50.0f};

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 44 24
	48		 movss	 DWORD PTR Scale2$4[rsp], xmm0
  0026e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00276	f3 0f 11 44 24
	4c		 movss	 DWORD PTR Scale2$4[rsp+4], xmm0

; 35   :             DrawObject(Object, Position2, Scale2, Angle);

  0027c	f3 0f 10 5c 24
	20		 movss	 xmm3, DWORD PTR Angle$[rsp]
  00282	4c 8b 44 24 48	 mov	 r8, QWORD PTR Scale2$4[rsp]
  00287	48 8b 54 24 50	 mov	 rdx, QWORD PTR Position2$5[rsp]
  0028c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Object$[rsp]
  00291	e8 00 00 00 00	 call	 DrawObject

; 36   :         }
; 37   :         EndDrawing();

  00296	e8 00 00 00 00	 call	 EndDrawing

; 38   :     }

  0029b	e9 ea fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 39   :     
; 40   :     return(0);

  002a0	33 c0		 xor	 eax, eax

; 41   : }

  002a2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002aa	48 33 cc	 xor	 rcx, rsp
  002ad	e8 00 00 00 00	 call	 __security_check_cookie
  002b2	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  002b9	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BD3D11.c
_TEXT	SEGMENT
VSync$ = 32
Result$ = 36
EndDrawing PROC

; 387  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 388  :     b32 VSync = true;

  00004	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR VSync$[rsp], 1

; 389  :     HRESULT Result = IDXGISwapChain1_Present(RendererData.SwapChain, VSync, 0);

  0000c	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR RendererData+16
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	45 33 c0	 xor	 r8d, r8d
  00019	8b 54 24 20	 mov	 edx, DWORD PTR VSync$[rsp]
  0001d	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR RendererData+16
  00024	ff 50 40	 call	 QWORD PTR [rax+64]
  00027	89 44 24 24	 mov	 DWORD PTR Result$[rsp], eax

; 390  :     if(Result == DXGI_STATUS_OCCLUDED)

  0002b	81 7c 24 24 01
	00 7a 08	 cmp	 DWORD PTR Result$[rsp], 142213121 ; 087a0001H
  00033	75 14		 jne	 SHORT $LN2@EndDrawing

; 391  :     {
; 392  :         // NOTE(evan): Window is minimized, cannot vsync - instead sleep a little
; 393  :         if(VSync)

  00035	83 7c 24 20 00	 cmp	 DWORD PTR VSync$[rsp], 0
  0003a	74 0b		 je	 SHORT $LN4@EndDrawing

; 394  :         {
; 395  :             Sleep(10);

  0003c	b9 0a 00 00 00	 mov	 ecx, 10
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep
$LN4@EndDrawing:

; 396  :         }
; 397  :     }

  00047	eb 14		 jmp	 SHORT $LN3@EndDrawing
$LN2@EndDrawing:

; 398  :     else if(FAILED(Result))

  00049	83 7c 24 24 00	 cmp	 DWORD PTR Result$[rsp], 0
  0004e	7d 0d		 jge	 SHORT $LN5@EndDrawing

; 399  :     {
; 400  :         // TODO(evan); Log this instead of asserting
; 401  :         Assert(!"Failed to present swap chain. Device lost?");

  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142769
  00057	48 85 c0	 test	 rax, rax
  0005a	74 01		 je	 SHORT $LN6@EndDrawing
  0005c	cc		 int	 3
$LN6@EndDrawing:
$LN5@EndDrawing:
$LN3@EndDrawing:

; 402  :     }
; 403  : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
EndDrawing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BD3D11.c
_TEXT	SEGMENT
Offset$ = 64
Stride$ = 68
Mapped$1 = 72
$T2 = 96
$T3 = 160
$T4 = 224
Projection$5 = 288
Transform$6 = 352
M$7 = 416
__$ArrayPad$ = 480
Object$ = 528
Position$ = 536
Scale$ = 544
Rotation$ = 552
DrawObject PROC

; 357  : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c4	 xor	 rax, rsp
  00028	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 358  :     u32 Stride = sizeof(struct vertex);

  00030	c7 44 24 44 1c
	00 00 00	 mov	 DWORD PTR Stride$[rsp], 28

; 359  :     u32 Offset = 0;

  00038	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR Offset$[rsp], 0

; 360  :     ID3D11DeviceContext_IASetVertexBuffers(RendererData.Context, 0, 1, &Object.VBuffer, &Stride, &Offset);

  00040	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Offset$[rsp]
  0004f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00054	48 8d 4c 24 44	 lea	 rcx, QWORD PTR Stride$[rsp]
  00059	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0005e	4c 8d 8c 24 10
	02 00 00	 lea	 r9, QWORD PTR Object$[rsp]
  00066	41 b8 01 00 00
	00		 mov	 r8d, 1
  0006c	33 d2		 xor	 edx, edx
  0006e	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00075	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]

; 361  :     
; 362  :     {
; 363  :         mat4 Projection;
; 364  :         CreateOrthographic(&Projection,

  0007b	f3 0f 2a 05 20
	00 00 00	 cvtsi2ss xmm0, DWORD PTR PlatformData+32
  00083	f3 0f 2a 0d 1c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR PlatformData+28
  0008b	f3 0f 10 15 7c
	00 00 00	 movss	 xmm2, DWORD PTR RendererData+124
  00093	f3 0f 11 54 24
	30		 movss	 DWORD PTR [rsp+48], xmm2
  00099	f3 0f 10 15 78
	00 00 00	 movss	 xmm2, DWORD PTR RendererData+120
  000a1	f3 0f 11 54 24
	28		 movss	 DWORD PTR [rsp+40], xmm2
  000a7	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  000ad	0f 57 db	 xorps	 xmm3, xmm3
  000b0	0f 28 d1	 movaps	 xmm2, xmm1
  000b3	0f 57 c9	 xorps	 xmm1, xmm1
  000b6	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR Projection$5[rsp]
  000be	e8 00 00 00 00	 call	 CreateOrthographic

; 365  :                            0.0f, (f32)PlatformData.Width,
; 366  :                            0.0f, (f32)PlatformData.Height,
; 367  :                            RendererData.Near, RendererData.Far);
; 368  :         
; 369  :         mat4 Transform = Mat4Identity();

  000c3	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  000cb	e8 00 00 00 00	 call	 Mat4Identity
  000d0	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR Transform$6[rsp]
  000d8	48 8b f9	 mov	 rdi, rcx
  000db	48 8b f0	 mov	 rsi, rax
  000de	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000e3	f3 a4		 rep movsb

; 370  :         CreateTransform(&Transform, Position, Scale, Rotation, &Projection);

  000e5	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR Projection$5[rsp]
  000ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f2	f3 0f 10 9c 24
	28 02 00 00	 movss	 xmm3, DWORD PTR Rotation$[rsp]
  000fb	4c 8b 84 24 20
	02 00 00	 mov	 r8, QWORD PTR Scale$[rsp]
  00103	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR Position$[rsp]
  0010b	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR Transform$6[rsp]
  00113	e8 00 00 00 00	 call	 CreateTransform

; 371  :         
; 372  :         mat4 M;
; 373  :         Mat4Multiply(&M, Transform, Projection);

  00118	48 8d 44 24 60	 lea	 rax, QWORD PTR $T2[rsp]
  0011d	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR Projection$5[rsp]
  00125	48 8b f8	 mov	 rdi, rax
  00128	48 8b f1	 mov	 rsi, rcx
  0012b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00130	f3 a4		 rep movsb
  00132	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  0013a	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR Transform$6[rsp]
  00142	48 8b f8	 mov	 rdi, rax
  00145	48 8b f1	 mov	 rsi, rcx
  00148	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0014d	f3 a4		 rep movsb
  0014f	4c 8d 44 24 60	 lea	 r8, QWORD PTR $T2[rsp]
  00154	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  0015c	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR M$7[rsp]
  00164	e8 00 00 00 00	 call	 Mat4Multiply

; 374  :         
; 375  :         D3D11_MAPPED_SUBRESOURCE Mapped;
; 376  :         ID3D11DeviceContext_Map(RendererData.Context, (ID3D11Resource *)RendererData.UBuffer,

  00169	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00170	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00173	48 8d 4c 24 48	 lea	 rcx, QWORD PTR Mapped$1[rsp]
  00178	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00185	41 b9 04 00 00
	00		 mov	 r9d, 4
  0018b	45 33 c0	 xor	 r8d, r8d
  0018e	48 8b 15 30 00
	00 00		 mov	 rdx, QWORD PTR RendererData+48
  00195	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  0019c	ff 50 70	 call	 QWORD PTR [rax+112]

; 377  :                                 0, D3D11_MAP_WRITE_DISCARD, 0, &Mapped);
; 378  :         memcpy(Mapped.pData, &M, sizeof(M));

  0019f	48 8d 84 24 a0
	01 00 00	 lea	 rax, QWORD PTR M$7[rsp]
  001a7	48 8b 7c 24 48	 mov	 rdi, QWORD PTR Mapped$1[rsp]
  001ac	48 8b f0	 mov	 rsi, rax
  001af	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001b4	f3 a4		 rep movsb

; 379  :         ID3D11DeviceContext_Unmap(RendererData.Context, (ID3D11Resource *)RendererData.UBuffer, 0);

  001b6	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  001bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c0	45 33 c0	 xor	 r8d, r8d
  001c3	48 8b 15 30 00
	00 00		 mov	 rdx, QWORD PTR RendererData+48
  001ca	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  001d1	ff 50 78	 call	 QWORD PTR [rax+120]

; 380  :     }
; 381  :     
; 382  :     ID3D11DeviceContext_Draw(RendererData.Context, 3, 0);

  001d4	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  001db	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001de	45 33 c0	 xor	 r8d, r8d
  001e1	ba 03 00 00 00	 mov	 edx, 3
  001e6	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  001ed	ff 50 68	 call	 QWORD PTR [rax+104]

; 383  : }

  001f0	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f8	48 33 cc	 xor	 rcx, rsp
  001fb	e8 00 00 00 00	 call	 __security_check_cookie
  00200	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  00207	5f		 pop	 rdi
  00208	5e		 pop	 rsi
  00209	c3		 ret	 0
DrawObject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BD3D11.c
_TEXT	SEGMENT
Result$ = 48
BackBuffer$1 = 56
Depth$2 = 64
DepthDesc$3 = 72
Viewport$4 = 120
Color$5 = 144
__$ArrayPad$ = 160
BeginDrawing PROC

; 270  : {

  00000	40 57		 push	 rdi
  00002	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 271  :     HRESULT Result;
; 272  :     
; 273  :     if(RendererData.RTView == 0 ||
; 274  :        PlatformData.Width != RendererData.CurrentWidth ||

  0001b	48 83 3d 60 00
	00 00 00	 cmp	 QWORD PTR RendererData+96, 0
  00023	74 20		 je	 SHORT $LN3@BeginDrawi
  00025	8b 05 70 00 00
	00		 mov	 eax, DWORD PTR RendererData+112
  0002b	39 05 1c 00 00
	00		 cmp	 DWORD PTR PlatformData+28, eax
  00031	75 12		 jne	 SHORT $LN3@BeginDrawi
  00033	8b 05 74 00 00
	00		 mov	 eax, DWORD PTR RendererData+116
  00039	39 05 20 00 00
	00		 cmp	 DWORD PTR PlatformData+32, eax
  0003f	0f 84 db 01 00
	00		 je	 $LN2@BeginDrawi
$LN3@BeginDrawi:

; 275  :        PlatformData.Height != RendererData.CurrentHeight)
; 276  :     {
; 277  :         if(RendererData.RTView)

  00045	48 83 3d 60 00
	00 00 00	 cmp	 QWORD PTR RendererData+96, 0
  0004d	74 55		 je	 SHORT $LN4@BeginDrawi

; 278  :         {
; 279  :             ID3D11DeviceContext_ClearState(RendererData.Context);

  0004f	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00060	ff 90 70 03 00
	00		 call	 QWORD PTR [rax+880]

; 280  :             ID3D11RenderTargetView_Release(RendererData.RTView);

  00066	48 8b 05 60 00
	00 00		 mov	 rax, QWORD PTR RendererData+96
  0006d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00070	48 8b 0d 60 00
	00 00		 mov	 rcx, QWORD PTR RendererData+96
  00077	ff 50 10	 call	 QWORD PTR [rax+16]

; 281  :             ID3D11DepthStencilView_Release(RendererData.DSView);

  0007a	48 8b 05 68 00
	00 00		 mov	 rax, QWORD PTR RendererData+104
  00081	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00084	48 8b 0d 68 00
	00 00		 mov	 rcx, QWORD PTR RendererData+104
  0008b	ff 50 10	 call	 QWORD PTR [rax+16]

; 282  :             RendererData.RTView = 0;

  0008e	48 c7 05 60 00
	00 00 00 00 00
	00		 mov	 QWORD PTR RendererData+96, 0

; 283  :             RendererData.DSView = 0;

  00099	48 c7 05 68 00
	00 00 00 00 00
	00		 mov	 QWORD PTR RendererData+104, 0
$LN4@BeginDrawi:

; 284  :         }
; 285  :         
; 286  :         if(PlatformData.Width != 0 && PlatformData.Height != 0)

  000a4	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR PlatformData+28, 0
  000ab	0f 84 57 01 00
	00		 je	 $LN5@BeginDrawi
  000b1	83 3d 20 00 00
	00 00		 cmp	 DWORD PTR PlatformData+32, 0
  000b8	0f 84 4a 01 00
	00		 je	 $LN5@BeginDrawi

; 287  :         {
; 288  :             Result = IDXGISwapChain1_ResizeBuffers(RendererData.SwapChain, 0,

  000be	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR RendererData+16
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000d0	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000d8	44 8b 0d 20 00
	00 00		 mov	 r9d, DWORD PTR PlatformData+32
  000df	44 8b 05 1c 00
	00 00		 mov	 r8d, DWORD PTR PlatformData+28
  000e6	33 d2		 xor	 edx, edx
  000e8	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR RendererData+16
  000ef	ff 50 68	 call	 QWORD PTR [rax+104]
  000f2	89 44 24 30	 mov	 DWORD PTR Result$[rsp], eax

; 289  :                                                    PlatformData.Width, PlatformData.Height, DXGI_FORMAT_UNKNOWN, 0);
; 290  :             if(FAILED(Result))

  000f6	83 7c 24 30 00	 cmp	 DWORD PTR Result$[rsp], 0
  000fb	7d 0d		 jge	 SHORT $LN6@BeginDrawi

; 291  :             {
; 292  :                 // TODO(evan): Log this instead of asserting
; 293  :                 Assert(!"Failed to resize swap chain!");

  000fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142734
  00104	48 85 c0	 test	 rax, rax
  00107	74 01		 je	 SHORT $LN7@BeginDrawi
  00109	cc		 int	 3
$LN7@BeginDrawi:
$LN6@BeginDrawi:

; 294  :             }
; 295  :             
; 296  :             ID3D11Texture2D *BackBuffer;
; 297  :             IDXGISwapChain1_GetBuffer(RendererData.SwapChain, 0, &IID_ID3D11Texture2D, &BackBuffer);

  0010a	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR RendererData+16
  00111	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00114	4c 8d 4c 24 38	 lea	 r9, QWORD PTR BackBuffer$1[rsp]
  00119	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:IID_ID3D11Texture2D
  00120	33 d2		 xor	 edx, edx
  00122	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR RendererData+16
  00129	ff 50 48	 call	 QWORD PTR [rax+72]

; 298  :             ID3D11Device_CreateRenderTargetView(RendererData.Device, (ID3D11Resource *)BackBuffer, 0, &RendererData.RTView);

  0012c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00133	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00136	4c 8d 0d 60 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+96
  0013d	45 33 c0	 xor	 r8d, r8d
  00140	48 8b 54 24 38	 mov	 rdx, QWORD PTR BackBuffer$1[rsp]
  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  0014c	ff 50 48	 call	 QWORD PTR [rax+72]

; 299  :             ID3D11Texture2D_Release(BackBuffer);

  0014f	48 8b 44 24 38	 mov	 rax, QWORD PTR BackBuffer$1[rsp]
  00154	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00157	48 8b 4c 24 38	 mov	 rcx, QWORD PTR BackBuffer$1[rsp]
  0015c	ff 50 10	 call	 QWORD PTR [rax+16]

; 300  :             
; 301  :             D3D11_TEXTURE2D_DESC DepthDesc = {0};

  0015f	48 8d 44 24 48	 lea	 rax, QWORD PTR DepthDesc$3[rsp]
  00164	48 8b f8	 mov	 rdi, rax
  00167	33 c0		 xor	 eax, eax
  00169	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0016e	f3 aa		 rep stosb

; 302  :             DepthDesc.Width = PlatformData.Width;

  00170	8b 05 1c 00 00
	00		 mov	 eax, DWORD PTR PlatformData+28
  00176	89 44 24 48	 mov	 DWORD PTR DepthDesc$3[rsp], eax

; 303  :             DepthDesc.Height = PlatformData.Height;

  0017a	8b 05 20 00 00
	00		 mov	 eax, DWORD PTR PlatformData+32
  00180	89 44 24 4c	 mov	 DWORD PTR DepthDesc$3[rsp+4], eax

; 304  :             DepthDesc.MipLevels = 1;

  00184	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR DepthDesc$3[rsp+8], 1

; 305  :             DepthDesc.ArraySize = 1;

  0018c	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR DepthDesc$3[rsp+12], 1

; 306  :             DepthDesc.Format = DXGI_FORMAT_D32_FLOAT;

  00194	c7 44 24 58 28
	00 00 00	 mov	 DWORD PTR DepthDesc$3[rsp+16], 40 ; 00000028H

; 307  :             DepthDesc.SampleDesc.Count = 1;

  0019c	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR DepthDesc$3[rsp+20], 1

; 308  :             DepthDesc.Usage = D3D11_USAGE_DEFAULT;

  001a4	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR DepthDesc$3[rsp+28], 0

; 309  :             DepthDesc.BindFlags = D3D11_BIND_DEPTH_STENCIL;

  001ac	c7 44 24 68 40
	00 00 00	 mov	 DWORD PTR DepthDesc$3[rsp+32], 64 ; 00000040H

; 310  :             
; 311  :             ID3D11Texture2D *Depth;
; 312  :             ID3D11Device_CreateTexture2D(RendererData.Device, &DepthDesc, 0, &Depth);

  001b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  001bb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001be	4c 8d 4c 24 40	 lea	 r9, QWORD PTR Depth$2[rsp]
  001c3	45 33 c0	 xor	 r8d, r8d
  001c6	48 8d 54 24 48	 lea	 rdx, QWORD PTR DepthDesc$3[rsp]
  001cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  001d2	ff 50 28	 call	 QWORD PTR [rax+40]

; 313  :             ID3D11Device_CreateDepthStencilView(RendererData.Device, (ID3D11Resource *)Depth, 0, &RendererData.DSView);

  001d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  001dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001df	4c 8d 0d 68 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+104
  001e6	45 33 c0	 xor	 r8d, r8d
  001e9	48 8b 54 24 40	 mov	 rdx, QWORD PTR Depth$2[rsp]
  001ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  001f5	ff 50 50	 call	 QWORD PTR [rax+80]

; 314  :             ID3D11Texture2D_Release(Depth);

  001f8	48 8b 44 24 40	 mov	 rax, QWORD PTR Depth$2[rsp]
  001fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00200	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Depth$2[rsp]
  00205	ff 50 10	 call	 QWORD PTR [rax+16]
$LN5@BeginDrawi:

; 315  :         }
; 316  :         
; 317  :         RendererData.CurrentWidth = PlatformData.Width;

  00208	8b 05 1c 00 00
	00		 mov	 eax, DWORD PTR PlatformData+28
  0020e	89 05 70 00 00
	00		 mov	 DWORD PTR RendererData+112, eax

; 318  :         RendererData.CurrentHeight = PlatformData.Height;

  00214	8b 05 20 00 00
	00		 mov	 eax, DWORD PTR PlatformData+32
  0021a	89 05 74 00 00
	00		 mov	 DWORD PTR RendererData+116, eax
$LN2@BeginDrawi:

; 319  :     }
; 320  :     
; 321  :     if(RendererData.RTView)

  00220	48 83 3d 60 00
	00 00 00	 cmp	 QWORD PTR RendererData+96, 0
  00228	0f 84 75 02 00
	00		 je	 $LN8@BeginDrawi

; 322  :     {
; 323  :         D3D11_VIEWPORT Viewport = {0};

  0022e	48 8d 44 24 78	 lea	 rax, QWORD PTR Viewport$4[rsp]
  00233	48 8b f8	 mov	 rdi, rax
  00236	33 c0		 xor	 eax, eax
  00238	b9 18 00 00 00	 mov	 ecx, 24
  0023d	f3 aa		 rep stosb

; 324  :         Viewport.Width = (f32)PlatformData.Width;

  0023f	f3 0f 2a 05 1c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR PlatformData+28
  00247	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR Viewport$4[rsp+8], xmm0

; 325  :         Viewport.Height = (f32)PlatformData.Height;

  00250	f3 0f 2a 05 20
	00 00 00	 cvtsi2ss xmm0, DWORD PTR PlatformData+32
  00258	f3 0f 11 84 24
	84 00 00 00	 movss	 DWORD PTR Viewport$4[rsp+12], xmm0

; 326  :         Viewport.MaxDepth = 1;

  00261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00269	f3 0f 11 84 24
	8c 00 00 00	 movss	 DWORD PTR Viewport$4[rsp+20], xmm0

; 327  :         
; 328  :         f32 Color[] = {0.392f, 0.584f, 0.929f, 1.0f};

  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ec8b439
  0027a	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR Color$5[rsp], xmm0
  00283	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f158106
  0028b	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR Color$5[rsp+4], xmm0
  00294	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6dd2f2
  0029c	f3 0f 11 84 24
	98 00 00 00	 movss	 DWORD PTR Color$5[rsp+8], xmm0
  002a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ad	f3 0f 11 84 24
	9c 00 00 00	 movss	 DWORD PTR Color$5[rsp+12], xmm0

; 329  :         ID3D11DeviceContext_ClearRenderTargetView(RendererData.Context, RendererData.RTView, Color);

  002b6	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  002bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c0	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR Color$5[rsp]
  002c8	48 8b 15 60 00
	00 00		 mov	 rdx, QWORD PTR RendererData+96
  002cf	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  002d6	ff 90 90 01 00
	00		 call	 QWORD PTR [rax+400]

; 330  :         ID3D11DeviceContext_ClearDepthStencilView(RendererData.Context, RendererData.DSView,

  002dc	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  002e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e6	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  002eb	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  002f3	41 b8 03 00 00
	00		 mov	 r8d, 3
  002f9	48 8b 15 68 00
	00 00		 mov	 rdx, QWORD PTR RendererData+104
  00300	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00307	ff 90 a8 01 00
	00		 call	 QWORD PTR [rax+424]

; 331  :                                                   D3D11_CLEAR_DEPTH|D3D11_CLEAR_STENCIL, 1.0f, 0);
; 332  :         
; 333  :         ID3D11DeviceContext_IASetInputLayout(RendererData.Context, RendererData.Layout);

  0030d	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00314	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00317	48 8b 15 18 00
	00 00		 mov	 rdx, QWORD PTR RendererData+24
  0031e	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00325	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 334  :         ID3D11DeviceContext_IASetPrimitiveTopology(RendererData.Context, D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

  0032b	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00332	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00335	ba 04 00 00 00	 mov	 edx, 4
  0033a	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00341	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]

; 335  :         
; 336  :         ID3D11DeviceContext_VSSetConstantBuffers(RendererData.Context, 0, 1, &RendererData.UBuffer);

  00347	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  0034e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00351	4c 8d 0d 30 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+48
  00358	41 b8 01 00 00
	00		 mov	 r8d, 1
  0035e	33 d2		 xor	 edx, edx
  00360	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00367	ff 50 38	 call	 QWORD PTR [rax+56]

; 337  :         ID3D11DeviceContext_VSSetShader(RendererData.Context, RendererData.VShader, 0, 0);

  0036a	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00371	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00374	45 33 c9	 xor	 r9d, r9d
  00377	45 33 c0	 xor	 r8d, r8d
  0037a	48 8b 15 20 00
	00 00		 mov	 rdx, QWORD PTR RendererData+32
  00381	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00388	ff 50 58	 call	 QWORD PTR [rax+88]

; 338  :         
; 339  :         ID3D11DeviceContext_RSSetViewports(RendererData.Context, 1, &Viewport);

  0038b	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00392	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00395	4c 8d 44 24 78	 lea	 r8, QWORD PTR Viewport$4[rsp]
  0039a	ba 01 00 00 00	 mov	 edx, 1
  0039f	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  003a6	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 340  :         ID3D11DeviceContext_RSSetState(RendererData.Context, RendererData.RasterizerState);

  003ac	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  003b3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b6	48 8b 15 50 00
	00 00		 mov	 rdx, QWORD PTR RendererData+80
  003bd	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  003c4	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]

; 341  :         
; 342  :         ID3D11DeviceContext_PSSetSamplers(RendererData.Context, 0, 1, &RendererData.Sampler);

  003ca	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  003d1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003d4	4c 8d 0d 40 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+64
  003db	41 b8 01 00 00
	00		 mov	 r8d, 1
  003e1	33 d2		 xor	 edx, edx
  003e3	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  003ea	ff 50 50	 call	 QWORD PTR [rax+80]

; 343  :         
; 344  :         // TODO(evan): Object specific
; 345  :         ID3D11DeviceContext_PSSetShaderResources(RendererData.Context, 0, 1, &RendererData.TextureView);

  003ed	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  003f4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003f7	4c 8d 0d 38 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+56
  003fe	41 b8 01 00 00
	00		 mov	 r8d, 1
  00404	33 d2		 xor	 edx, edx
  00406	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  0040d	ff 50 40	 call	 QWORD PTR [rax+64]

; 346  :         
; 347  :         ID3D11DeviceContext_PSSetShader(RendererData.Context, RendererData.PShader, 0, 0);

  00410	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00417	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0041a	45 33 c9	 xor	 r9d, r9d
  0041d	45 33 c0	 xor	 r8d, r8d
  00420	48 8b 15 28 00
	00 00		 mov	 rdx, QWORD PTR RendererData+40
  00427	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  0042e	ff 50 48	 call	 QWORD PTR [rax+72]

; 348  :         
; 349  :         ID3D11DeviceContext_OMSetBlendState(RendererData.Context, RendererData.Blender, 0, ~0U);

  00431	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00438	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0043b	41 b9 ff ff ff
	ff		 mov	 r9d, -1			; ffffffffH
  00441	45 33 c0	 xor	 r8d, r8d
  00444	48 8b 15 48 00
	00 00		 mov	 rdx, QWORD PTR RendererData+72
  0044b	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00452	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]

; 350  :         ID3D11DeviceContext_OMSetDepthStencilState(RendererData.Context, RendererData.DepthState, 0);

  00458	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  0045f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00462	45 33 c0	 xor	 r8d, r8d
  00465	48 8b 15 58 00
	00 00		 mov	 rdx, QWORD PTR RendererData+88
  0046c	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  00473	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 351  :         ID3D11DeviceContext_OMSetRenderTargets(RendererData.Context, 1, &RendererData.RTView, RendererData.DSView);

  00479	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR RendererData+8
  00480	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00483	4c 8b 0d 68 00
	00 00		 mov	 r9, QWORD PTR RendererData+104
  0048a	4c 8d 05 60 00
	00 00		 lea	 r8, OFFSET FLAT:RendererData+96
  00491	ba 01 00 00 00	 mov	 edx, 1
  00496	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR RendererData+8
  0049d	ff 90 08 01 00
	00		 call	 QWORD PTR [rax+264]
$LN8@BeginDrawi:

; 352  :     }
; 353  : }

  004a3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004ab	48 33 cc	 xor	 rcx, rsp
  004ae	e8 00 00 00 00	 call	 __security_check_cookie
  004b3	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  004ba	5f		 pop	 rdi
  004bb	c3		 ret	 0
BeginDrawing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BD3D11.c
_TEXT	SEGMENT
Result$ = 32
Initial$ = 40
Desc$ = 56
__$ArrayPad$ = 80
Data$ = 112
DataSize$ = 120
CreateRendererObject PROC

; 252  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 253  :     renderer_object Result;
; 254  :     
; 255  :     D3D11_BUFFER_DESC Desc = {0};

  0001d	48 8d 44 24 38	 lea	 rax, QWORD PTR Desc$[rsp]
  00022	48 8b f8	 mov	 rdi, rax
  00025	33 c0		 xor	 eax, eax
  00027	b9 18 00 00 00	 mov	 ecx, 24
  0002c	f3 aa		 rep stosb

; 256  :     Desc.ByteWidth = DataSize;

  0002e	8b 44 24 78	 mov	 eax, DWORD PTR DataSize$[rsp]
  00032	89 44 24 38	 mov	 DWORD PTR Desc$[rsp], eax

; 257  :     Desc.Usage = D3D11_USAGE_IMMUTABLE;

  00036	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR Desc$[rsp+4], 1

; 258  :     Desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;

  0003e	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR Desc$[rsp+8], 1

; 259  :     
; 260  :     D3D11_SUBRESOURCE_DATA Initial = {0};

  00046	48 8d 44 24 28	 lea	 rax, QWORD PTR Initial$[rsp]
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 10 00 00 00	 mov	 ecx, 16
  00055	f3 aa		 rep stosb

; 261  :     Initial.pSysMem = Data;

  00057	48 8b 44 24 70	 mov	 rax, QWORD PTR Data$[rsp]
  0005c	48 89 44 24 28	 mov	 QWORD PTR Initial$[rsp], rax

; 262  :     
; 263  :     ID3D11Device_CreateBuffer(RendererData.Device, &Desc, &Initial, &Result.VBuffer);

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00068	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006b	4c 8d 4c 24 20	 lea	 r9, QWORD PTR Result$[rsp]
  00070	4c 8d 44 24 28	 lea	 r8, QWORD PTR Initial$[rsp]
  00075	48 8d 54 24 38	 lea	 rdx, QWORD PTR Desc$[rsp]
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00081	ff 50 18	 call	 QWORD PTR [rax+24]

; 264  :     
; 265  :     return(Result);

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 266  : }

  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008e	48 33 cc	 xor	 rcx, rsp
  00091	e8 00 00 00 00	 call	 __security_check_cookie
  00096	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
CreateRendererObject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BD3D11.c
_TEXT	SEGMENT
Result$ = 96
VBlob$1 = 104
Flags$2 = 112
Flags$3 = 116
Info$4 = 120
Factory$5 = 128
PBlob$6 = 136
Width$7 = 144
Error$8 = 152
DXGIAdapter$9 = 160
DXGIDevice$10 = 168
Levels$11 = 176
Height$12 = 180
Pixels$13 = 184
Texture$14 = 192
Message$15 = 200
Message$16 = 208
tv525 = 216
tv293 = 224
tv524 = 232
tv522 = 240
tv308 = 248
tv521 = 256
tv519 = 264
tv322 = 272
tv518 = 280
Data$17 = 288
Desc$18 = 304
Desc$19 = 328
Desc$20 = 376
Desc$21 = 424
Desc$22 = 480
Desc$23 = 536
Desc$24 = 576
Desc$25 = 848
HLSL$26 = 944
__$ArrayPad$ = 1664
Near$ = 1712
Far$ = 1720
InitializeRenderer PROC

; 14   : {

  00000	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00006	f3 0f 11 44 24
	08		 movss	 DWORD PTR [rsp+8], xmm0
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	48 81 ec 98 06
	00 00		 sub	 rsp, 1688		; 00000698H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 80
	06 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 15   :     RendererData.Near = Near;

  00027	f3 0f 10 84 24
	b0 06 00 00	 movss	 xmm0, DWORD PTR Near$[rsp]
  00030	f3 0f 11 05 78
	00 00 00	 movss	 DWORD PTR RendererData+120, xmm0

; 16   :     RendererData.Far = Far;

  00038	f3 0f 10 84 24
	b8 06 00 00	 movss	 xmm0, DWORD PTR Far$[rsp]
  00041	f3 0f 11 05 7c
	00 00 00	 movss	 DWORD PTR RendererData+124, xmm0

; 17   :     
; 18   :     HRESULT Result;
; 19   :     
; 20   :     {
; 21   :         UINT Flags = 0;

  00049	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR Flags$3[rsp], 0

; 22   :         
; 23   : #if BLIB_DEBUG
; 24   :         Flags |= D3D11_CREATE_DEVICE_DEBUG;

  00051	8b 44 24 74	 mov	 eax, DWORD PTR Flags$3[rsp]
  00055	83 c8 02	 or	 eax, 2
  00058	89 44 24 74	 mov	 DWORD PTR Flags$3[rsp], eax

; 25   : #endif
; 26   :         
; 27   :         D3D_FEATURE_LEVEL Levels[] = {D3D_FEATURE_LEVEL_11_0};

  0005c	c7 84 24 b0 00
	00 00 00 b0 00
	00		 mov	 DWORD PTR Levels$11[rsp], 45056 ; 0000b000H

; 28   :         Result = D3D11CreateDevice(0, D3D_DRIVER_TYPE_HARDWARE, 0, Flags, Levels, ArrayCount(Levels),

  00067	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:RendererData+8
  0006e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00073	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  0007c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:RendererData
  00083	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00088	c7 44 24 30 07
	00 00 00	 mov	 DWORD PTR [rsp+48], 7
  00090	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  00098	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR Levels$11[rsp]
  000a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a5	44 8b 4c 24 74	 mov	 r9d, DWORD PTR Flags$3[rsp]
  000aa	45 33 c0	 xor	 r8d, r8d
  000ad	ba 01 00 00 00	 mov	 edx, 1
  000b2	33 c9		 xor	 ecx, ecx
  000b4	e8 00 00 00 00	 call	 D3D11CreateDevice
  000b9	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 29   :                                    D3D11_SDK_VERSION, &RendererData.Device, 0, &RendererData.Context);
; 30   :         AssertHR(Result);

  000bd	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  000c2	7d 01		 jge	 SHORT $LN2@Initialize
  000c4	cc		 int	 3
$LN2@Initialize:

; 31   :     }
; 32   :     
; 33   : #if BLIB_DEBUG
; 34   :     {
; 35   :         ID3D11InfoQueue *Info;
; 36   :         ID3D11Device_QueryInterface(RendererData.Device, &IID_ID3D11InfoQueue, &Info);

  000c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  000cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cf	4c 8d 44 24 78	 lea	 r8, QWORD PTR Info$4[rsp]
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:IID_ID3D11InfoQueue
  000db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  000e2	ff 10		 call	 QWORD PTR [rax]

; 37   :         ID3D11InfoQueue_SetBreakOnSeverity(Info, D3D11_MESSAGE_SEVERITY_CORRUPTION, true);

  000e4	48 8b 44 24 78	 mov	 rax, QWORD PTR Info$4[rsp]
  000e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ec	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f2	33 d2		 xor	 edx, edx
  000f4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Info$4[rsp]
  000f9	ff 90 f8 00 00
	00		 call	 QWORD PTR [rax+248]

; 38   :         ID3D11InfoQueue_SetBreakOnSeverity(Info, D3D11_MESSAGE_SEVERITY_ERROR, true);

  000ff	48 8b 44 24 78	 mov	 rax, QWORD PTR Info$4[rsp]
  00104	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00107	41 b8 01 00 00
	00		 mov	 r8d, 1
  0010d	ba 01 00 00 00	 mov	 edx, 1
  00112	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Info$4[rsp]
  00117	ff 90 f8 00 00
	00		 call	 QWORD PTR [rax+248]

; 39   :         ID3D11InfoQueue_Release(Info);

  0011d	48 8b 44 24 78	 mov	 rax, QWORD PTR Info$4[rsp]
  00122	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00125	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Info$4[rsp]
  0012a	ff 50 10	 call	 QWORD PTR [rax+16]

; 40   :     }
; 41   : #endif
; 42   :     
; 43   :     {
; 44   :         IDXGIDevice *DXGIDevice;
; 45   :         Result = ID3D11Device_QueryInterface(RendererData.Device, &IID_IDXGIDevice, &DXGIDevice);

  0012d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00134	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00137	4c 8d 84 24 a8
	00 00 00	 lea	 r8, QWORD PTR DXGIDevice$10[rsp]
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:IID_IDXGIDevice
  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  0014d	ff 10		 call	 QWORD PTR [rax]
  0014f	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 46   :         AssertHR(Result);

  00153	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  00158	7d 01		 jge	 SHORT $LN3@Initialize
  0015a	cc		 int	 3
$LN3@Initialize:

; 47   :         
; 48   :         IDXGIAdapter *DXGIAdapter;
; 49   :         Result = IDXGIDevice_GetAdapter(DXGIDevice, &DXGIAdapter);

  0015b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR DXGIDevice$10[rsp]
  00163	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00166	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR DXGIAdapter$9[rsp]
  0016e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR DXGIDevice$10[rsp]
  00176	ff 50 38	 call	 QWORD PTR [rax+56]
  00179	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 50   :         AssertHR(Result);

  0017d	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  00182	7d 01		 jge	 SHORT $LN4@Initialize
  00184	cc		 int	 3
$LN4@Initialize:

; 51   :         
; 52   :         IDXGIFactory2 *Factory;
; 53   :         Result = IDXGIAdapter_GetParent(DXGIAdapter, &IID_IDXGIFactory2, &Factory);

  00185	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR DXGIAdapter$9[rsp]
  0018d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00190	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR Factory$5[rsp]
  00198	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:IID_IDXGIFactory2
  0019f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR DXGIAdapter$9[rsp]
  001a7	ff 50 30	 call	 QWORD PTR [rax+48]
  001aa	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 54   :         AssertHR(Result);

  001ae	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  001b3	7d 01		 jge	 SHORT $LN5@Initialize
  001b5	cc		 int	 3
$LN5@Initialize:

; 55   :         
; 56   :         DXGI_SWAP_CHAIN_DESC1 Desc = {0};

  001b6	48 8d 84 24 78
	01 00 00	 lea	 rax, QWORD PTR Desc$20[rsp]
  001be	48 8b f8	 mov	 rdi, rax
  001c1	33 c0		 xor	 eax, eax
  001c3	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  001c8	f3 aa		 rep stosb

; 57   :         Desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;

  001ca	c7 84 24 80 01
	00 00 1c 00 00
	00		 mov	 DWORD PTR Desc$20[rsp+8], 28

; 58   :         Desc.SampleDesc.Count = 1;

  001d5	c7 84 24 88 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$20[rsp+16], 1

; 59   :         Desc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;

  001e0	c7 84 24 90 01
	00 00 20 00 00
	00		 mov	 DWORD PTR Desc$20[rsp+24], 32 ; 00000020H

; 60   :         Desc.BufferCount = 2;

  001eb	c7 84 24 94 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$20[rsp+28], 2

; 61   :         Desc.Scaling = DXGI_SCALING_NONE;

  001f6	c7 84 24 98 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$20[rsp+32], 1

; 62   :         Desc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD;

  00201	c7 84 24 9c 01
	00 00 04 00 00
	00		 mov	 DWORD PTR Desc$20[rsp+36], 4

; 63   :         
; 64   :         Result = IDXGIFactory2_CreateSwapChainForHwnd(Factory, (IUnknown *)RendererData.Device, PlatformData.Window,

  0020c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Factory$5[rsp]
  00214	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00217	48 8d 0d 10 00
	00 00		 lea	 rcx, OFFSET FLAT:RendererData+16
  0021e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00223	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0022c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00235	4c 8d 8c 24 78
	01 00 00	 lea	 r9, QWORD PTR Desc$20[rsp]
  0023d	4c 8b 05 08 00
	00 00		 mov	 r8, QWORD PTR PlatformData+8
  00244	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR RendererData
  0024b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Factory$5[rsp]
  00253	ff 50 78	 call	 QWORD PTR [rax+120]
  00256	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 65   :                                                       &Desc, 0, 0, &RendererData.SwapChain);
; 66   :         AssertHR(Result);

  0025a	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  0025f	7d 01		 jge	 SHORT $LN6@Initialize
  00261	cc		 int	 3
$LN6@Initialize:

; 67   :         
; 68   :         IDXGIFactory_MakeWindowAssociation(Factory, PlatformData.Window, DXGI_MWA_NO_ALT_ENTER);

  00262	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Factory$5[rsp]
  0026a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00273	48 8b 15 08 00
	00 00		 mov	 rdx, QWORD PTR PlatformData+8
  0027a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Factory$5[rsp]
  00282	ff 50 40	 call	 QWORD PTR [rax+64]

; 69   :         
; 70   :         IDXGIFactory2_Release(Factory);

  00285	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Factory$5[rsp]
  0028d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00290	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Factory$5[rsp]
  00298	ff 50 10	 call	 QWORD PTR [rax+16]

; 71   :         IDXGIAdapter_Release(DXGIAdapter);

  0029b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR DXGIAdapter$9[rsp]
  002a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR DXGIAdapter$9[rsp]
  002ae	ff 50 10	 call	 QWORD PTR [rax+16]

; 72   :         IDXGIDevice_Release(DXGIDevice);

  002b1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR DXGIDevice$10[rsp]
  002b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002bc	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR DXGIDevice$10[rsp]
  002c4	ff 50 10	 call	 QWORD PTR [rax+16]

; 73   :     }
; 74   :     
; 75   :     {
; 76   :         D3D11_INPUT_ELEMENT_DESC Desc[] =

  002c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142689
  002ce	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR Desc$25[rsp], rax
  002d6	c7 84 24 58 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+8], 0
  002e1	c7 84 24 5c 03
	00 00 10 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+12], 16
  002ec	c7 84 24 60 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+16], 0
  002f7	c7 84 24 64 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+20], 0
  00302	c7 84 24 68 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+24], 0
  0030d	c7 84 24 6c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+28], 0
  00318	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142691
  0031f	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR Desc$25[rsp+32], rax
  00327	c7 84 24 78 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+40], 0
  00332	c7 84 24 7c 03
	00 00 10 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+44], 16
  0033d	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+48], 0
  00348	c7 84 24 84 03
	00 00 08 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+52], 8
  00353	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+56], 0
  0035e	c7 84 24 8c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+60], 0
  00369	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142693
  00370	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR Desc$25[rsp+64], rax
  00378	c7 84 24 98 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+72], 0
  00383	c7 84 24 9c 03
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+76], 6
  0038e	c7 84 24 a0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+80], 0
  00399	c7 84 24 a4 03
	00 00 10 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+84], 16
  003a4	c7 84 24 a8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+88], 0
  003af	c7 84 24 ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$25[rsp+92], 0

; 77   :         {
; 78   :             {"POSITION", 0, DXGI_FORMAT_R32G32_FLOAT, 0, offsetof(struct vertex, Position), D3D11_INPUT_PER_VERTEX_DATA, 0},
; 79   :             {"TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, offsetof(struct vertex, Uv), D3D11_INPUT_PER_VERTEX_DATA, 0},
; 80   :             {"COLOR",    0, DXGI_FORMAT_R32G32B32_FLOAT, 0, offsetof(struct vertex, Color), D3D11_INPUT_PER_VERTEX_DATA, 0}
; 81   :         };
; 82   :         
; 83   :         const char HLSL[] =

  003ba	48 8d 84 24 b0
	03 00 00	 lea	 rax, QWORD PTR HLSL$26[rsp]
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG142694
  003c9	48 8b f8	 mov	 rdi, rax
  003cc	48 8b f1	 mov	 rsi, rcx
  003cf	b9 c1 02 00 00	 mov	 ecx, 705		; 000002c1H
  003d4	f3 a4		 rep movsb

; 84   :             "#line " STR(__LINE__) "\n"
; 85   :             "struct vs_input \n"
; 86   :             "{\n"
; 87   :             "float2 Position : POSITION;\n"
; 88   :             "float2 Uv       : TEXCOORD;\n"
; 89   :             "float3 Color    : COLOR;\n"
; 90   :             "};\n"
; 91   :             "struct ps_input \n"
; 92   :             "{\n"
; 93   :             "float4 Position : SV_POSITION;\n"
; 94   :             "float2 Uv       : TEXCOORD;\n"
; 95   :             "float4 Color    : COLOR;\n"
; 96   :             "};\n"
; 97   :             "cbuffer cbuffer0 : register(b0)\n"
; 98   :             "{\n"
; 99   :             "row_major float4x4 Transform;\n"
; 100  :             "}\n"
; 101  :             "sampler sampler0 : register(s0);\n"
; 102  :             "Texture2D<float4> texture0 : register(t0);\n"
; 103  :             "ps_input Vertex(vs_input Input)\n"
; 104  :             "{\n"
; 105  :             "ps_input Output;\n"
; 106  :             "Output.Position = mul(float4(Input.Position, 0, 1), Transform);\n"
; 107  :             "Output.Position.z = 0;\n"
; 108  :             "Output.Uv = Input.Uv;\n"
; 109  :             "Output.Color = float4(Input.Color, 1);\n"
; 110  :             "return Output;\n"
; 111  :             "}\n"
; 112  :             "float4 Pixel(ps_input Input) : SV_TARGET \n"
; 113  :             "{\n"
; 114  :             "float4 Texture = texture0.Sample(sampler0, Input.Uv);\n"
; 115  :             "return Input.Color*Texture;\n"
; 116  :             "}\n";
; 117  :         
; 118  :         UINT Flags = D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR|D3DCOMPILE_ENABLE_STRICTNESS|D3DCOMPILE_WARNINGS_ARE_ERRORS;

  003d6	c7 44 24 70 10
	08 04 00	 mov	 DWORD PTR Flags$2[rsp], 264208 ; 00040810H

; 119  : #if BLIB_DEBUG
; 120  :         Flags |= D3DCOMPILE_DEBUG|D3DCOMPILE_SKIP_OPTIMIZATION;

  003de	8b 44 24 70	 mov	 eax, DWORD PTR Flags$2[rsp]
  003e2	83 c8 05	 or	 eax, 5
  003e5	89 44 24 70	 mov	 DWORD PTR Flags$2[rsp], eax

; 121  : #else
; 122  :         Flags |= D3DCOMPILE_OPTIMIZATION_LEVEL3;
; 123  : #endif
; 124  :         
; 125  :         ID3DBlob *Error;
; 126  :         
; 127  :         ID3DBlob *VBlob;
; 128  :         Result = D3DCompile(HLSL, sizeof(HLSL), 0, 0, 0, "Vertex", "vs_5_0", Flags, 0, &VBlob, &Error);

  003e9	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR Error$8[rsp]
  003f1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  003f6	48 8d 44 24 68	 lea	 rax, QWORD PTR VBlob$1[rsp]
  003fb	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00400	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  00408	8b 44 24 70	 mov	 eax, DWORD PTR Flags$2[rsp]
  0040c	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00410	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142695
  00417	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0041c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142696
  00423	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00428	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00431	45 33 c9	 xor	 r9d, r9d
  00434	45 33 c0	 xor	 r8d, r8d
  00437	ba c1 02 00 00	 mov	 edx, 705		; 000002c1H
  0043c	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR HLSL$26[rsp]
  00444	e8 00 00 00 00	 call	 D3DCompile
  00449	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 129  :         if(FAILED(Result))

  0044d	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  00452	7d 39		 jge	 SHORT $LN7@Initialize

; 130  :         {
; 131  :             const char *Message = ID3D10Blob_GetBufferPointer(Error);

  00454	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Error$8[rsp]
  0045c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0045f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Error$8[rsp]
  00467	ff 50 18	 call	 QWORD PTR [rax+24]
  0046a	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR Message$15[rsp], rax

; 132  :             OutputDebugStringA(Message);

  00472	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR Message$15[rsp]
  0047a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 133  :             Assert(!"Failed to compile vertex shader!");

  00480	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142699
  00487	48 85 c0	 test	 rax, rax
  0048a	74 01		 je	 SHORT $LN8@Initialize
  0048c	cc		 int	 3
$LN8@Initialize:
$LN7@Initialize:

; 134  :         }
; 135  :         
; 136  :         ID3DBlob *PBlob;
; 137  :         Result = D3DCompile(HLSL, sizeof(HLSL), 0, 0, 0, "Pixel", "ps_5_0", Flags, 0, &PBlob, &Error);

  0048d	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR Error$8[rsp]
  00495	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0049a	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR PBlob$6[rsp]
  004a2	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  004a7	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  004af	8b 44 24 70	 mov	 eax, DWORD PTR Flags$2[rsp]
  004b3	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  004b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142700
  004be	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142701
  004ca	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004cf	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  004d8	45 33 c9	 xor	 r9d, r9d
  004db	45 33 c0	 xor	 r8d, r8d
  004de	ba c1 02 00 00	 mov	 edx, 705		; 000002c1H
  004e3	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR HLSL$26[rsp]
  004eb	e8 00 00 00 00	 call	 D3DCompile
  004f0	89 44 24 60	 mov	 DWORD PTR Result$[rsp], eax

; 138  :         if(FAILED(Result))

  004f4	83 7c 24 60 00	 cmp	 DWORD PTR Result$[rsp], 0
  004f9	7d 39		 jge	 SHORT $LN9@Initialize

; 139  :         {
; 140  :             const char *Message = ID3D10Blob_GetBufferPointer(Error);

  004fb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Error$8[rsp]
  00503	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00506	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Error$8[rsp]
  0050e	ff 50 18	 call	 QWORD PTR [rax+24]
  00511	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR Message$16[rsp], rax

; 141  :             OutputDebugStringA(Message);

  00519	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR Message$16[rsp]
  00521	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 142  :             Assert(!"Failed to compile pixel shader");

  00527	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG142704
  0052e	48 85 c0	 test	 rax, rax
  00531	74 01		 je	 SHORT $LN10@Initialize
  00533	cc		 int	 3
$LN10@Initialize:
$LN9@Initialize:

; 143  :         }
; 144  :         
; 145  :         ID3D11Device_CreateVertexShader(RendererData.Device,

  00534	48 8b 44 24 68	 mov	 rax, QWORD PTR VBlob$1[rsp]
  00539	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0053c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00541	ff 50 20	 call	 QWORD PTR [rax+32]
  00544	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
  0054c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00551	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00554	48 89 8c 24 d8
	00 00 00	 mov	 QWORD PTR tv525[rsp], rcx
  0055c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  00561	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv525[rsp]
  00569	ff 52 18	 call	 QWORD PTR [rdx+24]
  0056c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00573	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00576	48 89 8c 24 e8
	00 00 00	 mov	 QWORD PTR tv524[rsp], rcx
  0057e	48 8d 15 20 00
	00 00		 lea	 rdx, OFFSET FLAT:RendererData+32
  00585	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0058a	45 33 c9	 xor	 r9d, r9d
  0058d	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv293[rsp]
  00595	4c 8b c2	 mov	 r8, rdx
  00598	48 8b d0	 mov	 rdx, rax
  0059b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  005a2	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv524[rsp]
  005aa	ff 50 60	 call	 QWORD PTR [rax+96]

; 146  :                                         ID3D10Blob_GetBufferPointer(VBlob), ID3D10Blob_GetBufferSize(VBlob),
; 147  :                                         0, &RendererData.VShader);
; 148  :         ID3D11Device_CreatePixelShader(RendererData.Device,

  005ad	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR PBlob$6[rsp]
  005b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005b8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR PBlob$6[rsp]
  005c0	ff 50 20	 call	 QWORD PTR [rax+32]
  005c3	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv308[rsp], rax
  005cb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR PBlob$6[rsp]
  005d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005d6	48 89 8c 24 f0
	00 00 00	 mov	 QWORD PTR tv522[rsp], rcx
  005de	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR PBlob$6[rsp]
  005e6	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv522[rsp]
  005ee	ff 52 18	 call	 QWORD PTR [rdx+24]
  005f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  005f8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005fb	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv521[rsp], rcx
  00603	48 8d 15 28 00
	00 00		 lea	 rdx, OFFSET FLAT:RendererData+40
  0060a	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0060f	45 33 c9	 xor	 r9d, r9d
  00612	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv308[rsp]
  0061a	4c 8b c2	 mov	 r8, rdx
  0061d	48 8b d0	 mov	 rdx, rax
  00620	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00627	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv521[rsp]
  0062f	ff 50 78	 call	 QWORD PTR [rax+120]

; 149  :                                        ID3D10Blob_GetBufferPointer(PBlob), ID3D10Blob_GetBufferSize(PBlob),
; 150  :                                        0, &RendererData.PShader);
; 151  :         ID3D11Device_CreateInputLayout(RendererData.Device, Desc, ArrayCount(Desc),

  00632	48 8b 44 24 68	 mov	 rax, QWORD PTR VBlob$1[rsp]
  00637	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0063a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0063f	ff 50 20	 call	 QWORD PTR [rax+32]
  00642	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv322[rsp], rax
  0064a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0064f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00652	48 89 8c 24 08
	01 00 00	 mov	 QWORD PTR tv519[rsp], rcx
  0065a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  0065f	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv519[rsp]
  00667	ff 52 18	 call	 QWORD PTR [rdx+24]
  0066a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00671	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00674	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv518[rsp], rcx
  0067c	48 8d 15 18 00
	00 00		 lea	 rdx, OFFSET FLAT:RendererData+24
  00683	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00688	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv322[rsp]
  00690	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00695	4c 8b c8	 mov	 r9, rax
  00698	41 b8 03 00 00
	00		 mov	 r8d, 3
  0069e	48 8d 94 24 50
	03 00 00	 lea	 rdx, QWORD PTR Desc$25[rsp]
  006a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  006ad	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv518[rsp]
  006b5	ff 50 58	 call	 QWORD PTR [rax+88]

; 152  :                                        ID3D10Blob_GetBufferPointer(VBlob), ID3D10Blob_GetBufferSize(VBlob),
; 153  :                                        &RendererData.Layout);
; 154  :         
; 155  :         ID3D10Blob_Release(PBlob);

  006b8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR PBlob$6[rsp]
  006c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006c3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR PBlob$6[rsp]
  006cb	ff 50 10	 call	 QWORD PTR [rax+16]

; 156  :         ID3D10Blob_Release(VBlob);

  006ce	48 8b 44 24 68	 mov	 rax, QWORD PTR VBlob$1[rsp]
  006d3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR VBlob$1[rsp]
  006db	ff 50 10	 call	 QWORD PTR [rax+16]

; 157  :     }
; 158  :     
; 159  :     {
; 160  :         D3D11_BUFFER_DESC Desc = {0};

  006de	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR Desc$18[rsp]
  006e6	48 8b f8	 mov	 rdi, rax
  006e9	33 c0		 xor	 eax, eax
  006eb	b9 18 00 00 00	 mov	 ecx, 24
  006f0	f3 aa		 rep stosb

; 161  :         Desc.ByteWidth = 4*4*sizeof(f32);

  006f2	c7 84 24 30 01
	00 00 40 00 00
	00		 mov	 DWORD PTR Desc$18[rsp], 64 ; 00000040H

; 162  :         Desc.Usage = D3D11_USAGE_DYNAMIC;

  006fd	c7 84 24 34 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$18[rsp+4], 2

; 163  :         Desc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;

  00708	c7 84 24 38 01
	00 00 04 00 00
	00		 mov	 DWORD PTR Desc$18[rsp+8], 4

; 164  :         Desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;

  00713	c7 84 24 3c 01
	00 00 00 00 01
	00		 mov	 DWORD PTR Desc$18[rsp+12], 65536 ; 00010000H

; 165  :         
; 166  :         ID3D11Device_CreateBuffer(RendererData.Device, &Desc, 0, &RendererData.UBuffer);

  0071e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00725	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00728	4c 8d 0d 30 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+48
  0072f	45 33 c0	 xor	 r8d, r8d
  00732	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR Desc$18[rsp]
  0073a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00741	ff 50 18	 call	 QWORD PTR [rax+24]

; 167  :     }
; 168  :     
; 169  :     {
; 170  :         u32 Pixels[] =

  00744	c7 84 24 b8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR Pixels$13[rsp], -1 ; ffffffffH

; 171  :         {
; 172  :             0xFFFFFFFF
; 173  :         };
; 174  :         UINT Width = 1;

  0074f	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR Width$7[rsp], 1

; 175  :         UINT Height = 1;

  0075a	c7 84 24 b4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR Height$12[rsp], 1

; 176  :         
; 177  :         D3D11_TEXTURE2D_DESC Desc = {0};

  00765	48 8d 84 24 48
	01 00 00	 lea	 rax, QWORD PTR Desc$19[rsp]
  0076d	48 8b f8	 mov	 rdi, rax
  00770	33 c0		 xor	 eax, eax
  00772	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00777	f3 aa		 rep stosb

; 178  :         Desc.Width = Width;

  00779	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Width$7[rsp]
  00780	89 84 24 48 01
	00 00		 mov	 DWORD PTR Desc$19[rsp], eax

; 179  :         Desc.Height = Height;

  00787	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR Height$12[rsp]
  0078e	89 84 24 4c 01
	00 00		 mov	 DWORD PTR Desc$19[rsp+4], eax

; 180  :         Desc.MipLevels = 1;

  00795	c7 84 24 50 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$19[rsp+8], 1

; 181  :         Desc.ArraySize = 1;

  007a0	c7 84 24 54 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$19[rsp+12], 1

; 182  :         Desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;

  007ab	c7 84 24 58 01
	00 00 1c 00 00
	00		 mov	 DWORD PTR Desc$19[rsp+16], 28

; 183  :         Desc.SampleDesc.Count = 1;

  007b6	c7 84 24 5c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$19[rsp+20], 1

; 184  :         Desc.Usage = D3D11_USAGE_IMMUTABLE;

  007c1	c7 84 24 64 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$19[rsp+28], 1

; 185  :         Desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;

  007cc	c7 84 24 68 01
	00 00 08 00 00
	00		 mov	 DWORD PTR Desc$19[rsp+32], 8

; 186  :         
; 187  :         D3D11_SUBRESOURCE_DATA Data = {0};

  007d7	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR Data$17[rsp]
  007df	48 8b f8	 mov	 rdi, rax
  007e2	33 c0		 xor	 eax, eax
  007e4	b9 10 00 00 00	 mov	 ecx, 16
  007e9	f3 aa		 rep stosb

; 188  :         Data.pSysMem = Pixels;

  007eb	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR Pixels$13[rsp]
  007f3	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR Data$17[rsp], rax

; 189  :         Data.SysMemPitch = Width*sizeof(u32);

  007fb	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Width$7[rsp]
  00802	48 c1 e0 02	 shl	 rax, 2
  00806	89 84 24 28 01
	00 00		 mov	 DWORD PTR Data$17[rsp+8], eax

; 190  :         
; 191  :         ID3D11Texture2D *Texture;
; 192  :         ID3D11Device_CreateTexture2D(RendererData.Device, &Desc, &Data, &Texture);

  0080d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00814	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00817	4c 8d 8c 24 c0
	00 00 00	 lea	 r9, QWORD PTR Texture$14[rsp]
  0081f	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR Data$17[rsp]
  00827	48 8d 94 24 48
	01 00 00	 lea	 rdx, QWORD PTR Desc$19[rsp]
  0082f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00836	ff 50 28	 call	 QWORD PTR [rax+40]

; 193  :         ID3D11Device_CreateShaderResourceView(RendererData.Device, (ID3D11Resource *)Texture, 0, &RendererData.TextureView);

  00839	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00840	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00843	4c 8d 0d 38 00
	00 00		 lea	 r9, OFFSET FLAT:RendererData+56
  0084a	45 33 c0	 xor	 r8d, r8d
  0084d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR Texture$14[rsp]
  00855	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  0085c	ff 50 38	 call	 QWORD PTR [rax+56]

; 194  :         ID3D11Texture2D_Release(Texture);

  0085f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR Texture$14[rsp]
  00867	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0086a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR Texture$14[rsp]
  00872	ff 50 10	 call	 QWORD PTR [rax+16]

; 195  :     }
; 196  :     
; 197  :     {
; 198  :         D3D11_SAMPLER_DESC Desc = {0};

  00875	48 8d 84 24 e0
	01 00 00	 lea	 rax, QWORD PTR Desc$22[rsp]
  0087d	48 8b f8	 mov	 rdi, rax
  00880	33 c0		 xor	 eax, eax
  00882	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00887	f3 aa		 rep stosb

; 199  :         Desc.Filter = D3D11_FILTER_MIN_MAG_MIP_POINT;

  00889	c7 84 24 e0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$22[rsp], 0

; 200  :         Desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;

  00894	c7 84 24 e4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$22[rsp+4], 1

; 201  :         Desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;

  0089f	c7 84 24 e8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$22[rsp+8], 1

; 202  :         Desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;

  008aa	c7 84 24 ec 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$22[rsp+12], 1

; 203  :         
; 204  :         ID3D11Device_CreateSamplerState(RendererData.Device, &Desc, &RendererData.Sampler);

  008b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  008bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008bf	4c 8d 05 40 00
	00 00		 lea	 r8, OFFSET FLAT:RendererData+64
  008c6	48 8d 94 24 e0
	01 00 00	 lea	 rdx, QWORD PTR Desc$22[rsp]
  008ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  008d5	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]

; 205  :     }
; 206  :     
; 207  :     {
; 208  :         D3D11_BLEND_DESC Desc =

  008db	c7 84 24 40 02
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$24[rsp], 0
  008e6	c7 84 24 44 02
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+4], 0
  008f1	c7 84 24 48 02
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+8], 1
  008fc	c7 84 24 4c 02
	00 00 05 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+12], 5
  00907	c7 84 24 50 02
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+16], 6
  00912	c7 84 24 54 02
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+20], 1
  0091d	c7 84 24 58 02
	00 00 05 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+24], 5
  00928	c7 84 24 5c 02
	00 00 06 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+28], 6
  00933	c7 84 24 60 02
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$24[rsp+32], 1
  0093e	c6 84 24 64 02
	00 00 0f	 mov	 BYTE PTR Desc$24[rsp+36], 15
  00946	48 8d 84 24 68
	02 00 00	 lea	 rax, QWORD PTR Desc$24[rsp+40]
  0094e	48 8b f8	 mov	 rdi, rax
  00951	33 c0		 xor	 eax, eax
  00953	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  00958	f3 aa		 rep stosb

; 209  :         {
; 210  :             .RenderTarget[0] =
; 211  :             {
; 212  :                 .BlendEnable = true,
; 213  :                 .SrcBlend = D3D11_BLEND_SRC_ALPHA,
; 214  :                 .DestBlend = D3D11_BLEND_INV_SRC_ALPHA,
; 215  :                 .BlendOp = D3D11_BLEND_OP_ADD,
; 216  :                 .SrcBlendAlpha = D3D11_BLEND_SRC_ALPHA,
; 217  :                 .DestBlendAlpha = D3D11_BLEND_INV_SRC_ALPHA,
; 218  :                 .BlendOpAlpha = D3D11_BLEND_OP_ADD,
; 219  :                 .RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL
; 220  :             }
; 221  :         };
; 222  :         
; 223  :         ID3D11Device_CreateBlendState(RendererData.Device, &Desc, &RendererData.Blender);

  0095a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00961	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00964	4c 8d 05 48 00
	00 00		 lea	 r8, OFFSET FLAT:RendererData+72
  0096b	48 8d 94 24 40
	02 00 00	 lea	 rdx, QWORD PTR Desc$24[rsp]
  00973	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  0097a	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]

; 224  :     }
; 225  :     
; 226  :     {
; 227  :         D3D11_RASTERIZER_DESC Desc = {0};

  00980	48 8d 84 24 18
	02 00 00	 lea	 rax, QWORD PTR Desc$23[rsp]
  00988	48 8b f8	 mov	 rdi, rax
  0098b	33 c0		 xor	 eax, eax
  0098d	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00992	f3 aa		 rep stosb

; 228  :         Desc.FillMode = D3D11_FILL_SOLID;

  00994	c7 84 24 18 02
	00 00 03 00 00
	00		 mov	 DWORD PTR Desc$23[rsp], 3

; 229  :         Desc.CullMode = D3D11_CULL_NONE;

  0099f	c7 84 24 1c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$23[rsp+4], 1

; 230  :         
; 231  :         ID3D11Device_CreateRasterizerState(RendererData.Device, &Desc, &RendererData.RasterizerState);

  009aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  009b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009b4	4c 8d 05 50 00
	00 00		 lea	 r8, OFFSET FLAT:RendererData+80
  009bb	48 8d 94 24 18
	02 00 00	 lea	 rdx, QWORD PTR Desc$23[rsp]
  009c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  009ca	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]

; 232  :     }
; 233  :     
; 234  :     {
; 235  :         D3D11_DEPTH_STENCIL_DESC Desc = {0};

  009d0	48 8d 84 24 a8
	01 00 00	 lea	 rax, QWORD PTR Desc$21[rsp]
  009d8	48 8b f8	 mov	 rdi, rax
  009db	33 c0		 xor	 eax, eax
  009dd	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  009e2	f3 aa		 rep stosb

; 236  :         Desc.DepthEnable = false;

  009e4	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$21[rsp], 0

; 237  :         Desc.DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;

  009ef	c7 84 24 ac 01
	00 00 01 00 00
	00		 mov	 DWORD PTR Desc$21[rsp+4], 1

; 238  :         Desc.DepthFunc = D3D11_COMPARISON_LESS;

  009fa	c7 84 24 b0 01
	00 00 02 00 00
	00		 mov	 DWORD PTR Desc$21[rsp+8], 2

; 239  :         Desc.StencilEnable = false;

  00a05	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Desc$21[rsp+12], 0

; 240  :         Desc.StencilReadMask = D3D11_DEFAULT_STENCIL_READ_MASK;

  00a10	c6 84 24 b8 01
	00 00 ff	 mov	 BYTE PTR Desc$21[rsp+16], 255 ; 000000ffH

; 241  :         Desc.StencilWriteMask = D3D11_DEFAULT_STENCIL_WRITE_MASK;

  00a18	c6 84 24 b9 01
	00 00 ff	 mov	 BYTE PTR Desc$21[rsp+17], 255 ; 000000ffH

; 242  :         
; 243  :         ID3D11Device_CreateDepthStencilState(RendererData.Device, &Desc, &RendererData.DepthState);

  00a20	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RendererData
  00a27	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a2a	4c 8d 05 58 00
	00 00		 lea	 r8, OFFSET FLAT:RendererData+88
  00a31	48 8d 94 24 a8
	01 00 00	 lea	 rdx, QWORD PTR Desc$21[rsp]
  00a39	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RendererData
  00a40	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]

; 244  :     }
; 245  :     
; 246  :     RendererData.RTView = 0;

  00a46	48 c7 05 60 00
	00 00 00 00 00
	00		 mov	 QWORD PTR RendererData+96, 0

; 247  :     RendererData.DSView = 0;

  00a51	48 c7 05 68 00
	00 00 00 00 00
	00		 mov	 QWORD PTR RendererData+104, 0

; 248  : }

  00a5c	48 8b 8c 24 80
	06 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a64	48 33 cc	 xor	 rcx, rsp
  00a67	e8 00 00 00 00	 call	 __security_check_cookie
  00a6c	48 81 c4 98 06
	00 00		 add	 rsp, 1688		; 00000698H
  00a73	5f		 pop	 rdi
  00a74	5e		 pop	 rsi
  00a75	c3		 ret	 0
InitializeRenderer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BWindows.c
_TEXT	SEGMENT
DeltaTime$ = 48
EndCounter$ = 56
Message$ = 64
Rect$1 = 112
__$ArrayPad$ = 128
UpdatePlatform PROC

; 80   : {

  00000	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 81   :     LARGE_INTEGER EndCounter = Win32GetWallClock();

  00019	e8 00 00 00 00	 call	 Win32GetWallClock
  0001e	48 89 44 24 38	 mov	 QWORD PTR EndCounter$[rsp], rax

; 82   :     f32 DeltaTime = Win32GetSecondsElapsed(LastCounter, EndCounter);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR EndCounter$[rsp]
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR LastCounter
  0002f	e8 00 00 00 00	 call	 Win32GetSecondsElapsed
  00034	f3 0f 11 44 24
	30		 movss	 DWORD PTR DeltaTime$[rsp], xmm0

; 83   :     LastCounter = EndCounter;

  0003a	48 8b 44 24 38	 mov	 rax, QWORD PTR EndCounter$[rsp]
  0003f	48 89 05 00 00
	00 00		 mov	 QWORD PTR LastCounter, rax
$LN2@UpdatePlat:

; 84   :     
; 85   :     MSG Message;
; 86   :     while(PeekMessageW(&Message, 0, 0, 0, PM_REMOVE))

  00046	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0004e	45 33 c9	 xor	 r9d, r9d
  00051	45 33 c0	 xor	 r8d, r8d
  00054	33 d2		 xor	 edx, edx
  00056	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Message$[rsp]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageW
  00061	85 c0		 test	 eax, eax
  00063	74 18		 je	 SHORT $LN3@UpdatePlat

; 87   :     {
; 88   :         TranslateMessage(&Message);

  00065	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Message$[rsp]
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 89   :         DispatchMessageW(&Message);

  00070	48 8d 4c 24 40	 lea	 rcx, QWORD PTR Message$[rsp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageW

; 90   :     }

  0007b	eb c9		 jmp	 SHORT $LN2@UpdatePlat
$LN3@UpdatePlat:

; 91   :     
; 92   :     {
; 93   :         RECT Rect;
; 94   :         GetClientRect(PlatformData.Window, &Rect);

  0007d	48 8d 54 24 70	 lea	 rdx, QWORD PTR Rect$1[rsp]
  00082	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR PlatformData+8
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 95   :         PlatformData.Width = Rect.right - Rect.left;

  0008f	8b 44 24 70	 mov	 eax, DWORD PTR Rect$1[rsp]
  00093	8b 4c 24 78	 mov	 ecx, DWORD PTR Rect$1[rsp+8]
  00097	2b c8		 sub	 ecx, eax
  00099	8b c1		 mov	 eax, ecx
  0009b	89 05 1c 00 00
	00		 mov	 DWORD PTR PlatformData+28, eax

; 96   :         PlatformData.Height = Rect.bottom - Rect.top;

  000a1	8b 44 24 74	 mov	 eax, DWORD PTR Rect$1[rsp+4]
  000a5	8b 4c 24 7c	 mov	 ecx, DWORD PTR Rect$1[rsp+12]
  000a9	2b c8		 sub	 ecx, eax
  000ab	8b c1		 mov	 eax, ecx
  000ad	89 05 20 00 00
	00		 mov	 DWORD PTR PlatformData+32, eax

; 97   :     }
; 98   :     
; 99   :     return(DeltaTime);

  000b3	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR DeltaTime$[rsp]

; 100  : }

  000b9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c1	48 33 cc	 xor	 rcx, rsp
  000c4	e8 00 00 00 00	 call	 __security_check_cookie
  000c9	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000d0	c3		 ret	 0
UpdatePlatform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BWindows.c
_TEXT	SEGMENT
tv70 = 96
DesiredSchedularMS$ = 100
SleepIsGranular$ = 104
PerfCountFrequencyResult$ = 112
WindowClass$ = 128
Width$ = 224
Height$ = 232
WindowName$ = 240
InitializePlatform PROC

; 47   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	57		 push	 rdi
  0000e	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H

; 48   :     PlatformData.Instance = GetModuleHandle(0);

  00015	33 c9		 xor	 ecx, ecx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleW
  0001d	48 89 05 00 00
	00 00		 mov	 QWORD PTR PlatformData, rax

; 49   :     
; 50   :     LARGE_INTEGER PerfCountFrequencyResult;
; 51   :     QueryPerformanceFrequency(&PerfCountFrequencyResult);

  00024	48 8d 4c 24 70	 lea	 rcx, QWORD PTR PerfCountFrequencyResult$[rsp]
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 52   :     PlatformData.PerfCountFrequency = PerfCountFrequencyResult.QuadPart;

  0002f	48 8b 44 24 70	 mov	 rax, QWORD PTR PerfCountFrequencyResult$[rsp]
  00034	48 89 05 10 00
	00 00		 mov	 QWORD PTR PlatformData+16, rax

; 53   :     
; 54   :     // NOTE(evan): Set the Windows schedular granularity to 1 ms
; 55   :     //             so that Sleep() can be more granular
; 56   :     UINT DesiredSchedularMS = 1;

  0003b	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR DesiredSchedularMS$[rsp], 1

; 57   :     b32 SleepIsGranular = (timeBeginPeriod(DesiredSchedularMS) == TIMERR_NOERROR);

  00043	8b 4c 24 64	 mov	 ecx, DWORD PTR DesiredSchedularMS$[rsp]
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeBeginPeriod
  0004d	85 c0		 test	 eax, eax
  0004f	75 0a		 jne	 SHORT $LN4@Initialize
  00051	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00059	eb 08		 jmp	 SHORT $LN5@Initialize
$LN4@Initialize:
  0005b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN5@Initialize:
  00063	8b 44 24 60	 mov	 eax, DWORD PTR tv70[rsp]
  00067	89 44 24 68	 mov	 DWORD PTR SleepIsGranular$[rsp], eax

; 58   :     
; 59   :     WNDCLASSW WindowClass = {0};

  0006b	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00073	48 8b f8	 mov	 rdi, rax
  00076	33 c0		 xor	 eax, eax
  00078	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0007d	f3 aa		 rep stosb

; 60   :     WindowClass.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;

  0007f	c7 84 24 80 00
	00 00 23 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 35 ; 00000023H

; 61   :     WindowClass.lpfnWndProc = Win32WindowProc;

  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Win32WindowProc
  00091	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 62   :     WindowClass.hInstance = PlatformData.Instance;

  00099	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PlatformData
  000a0	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 63   :     WindowClass.hCursor = LoadCursorW(0, IDC_ARROW);

  000a8	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  000ad	33 c9		 xor	 ecx, ecx
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorW
  000b5	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+40], rax

; 64   :     WindowClass.lpszClassName = L"BLibWindowClass";

  000bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG119072
  000c4	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 65   :     
; 66   :     LastCounter = Win32GetWallClock();

  000cc	e8 00 00 00 00	 call	 Win32GetWallClock
  000d1	48 89 05 00 00
	00 00		 mov	 QWORD PTR LastCounter, rax

; 67   :     
; 68   :     if(RegisterClassW(&WindowClass))

  000d8	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassW
  000e6	0f b7 c0	 movzx	 eax, ax
  000e9	85 c0		 test	 eax, eax
  000eb	74 72		 je	 SHORT $LN2@Initialize

; 69   :     {
; 70   :         PlatformData.Window = CreateWindowW(WindowClass.lpszClassName, WindowName,

  000ed	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PlatformData
  000fd	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00102	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  0010b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00114	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR Height$[rsp]
  0011b	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0011f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR Width$[rsp]
  00126	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0012a	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  00132	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  0013a	41 b9 00 00 ca
	10		 mov	 r9d, 281673728		; 10ca0000H
  00140	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR WindowName$[rsp]
  00148	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  00150	33 c9		 xor	 ecx, ecx
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExW
  00158	48 89 05 08 00
	00 00		 mov	 QWORD PTR PlatformData+8, rax
$LN2@Initialize:

; 71   :                                             WS_CAPTION|WS_SYSMENU|WS_MINIMIZEBOX|WS_VISIBLE,
; 72   :                                             CW_USEDEFAULT, CW_USEDEFAULT, Width, Height,
; 73   :                                             0, 0, PlatformData.Instance, 0);
; 74   :     }
; 75   : }

  0015f	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00166	5f		 pop	 rdi
  00167	c3		 ret	 0
InitializePlatform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BWindows.c
_TEXT	SEGMENT
Result$ = 0
Start$ = 32
End$ = 40
Win32GetSecondsElapsed PROC

; 39   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 40   :     f32 Result = ((f32)(End.QuadPart - Start.QuadPart) /

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR Start$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR End$[rsp]
  00018	48 2b c8	 sub	 rcx, rax
  0001b	48 8b c1	 mov	 rax, rcx
  0001e	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00023	f3 48 0f 2a 0d
	10 00 00 00	 cvtsi2ss xmm1, QWORD PTR PlatformData+16
  0002c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00030	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 41   :                   (f32)PlatformData.PerfCountFrequency);
; 42   :     return(Result);

  00035	f3 0f 10 04 24	 movss	 xmm0, DWORD PTR Result$[rsp]

; 43   : }

  0003a	48 83 c4 18	 add	 rsp, 24
  0003e	c3		 ret	 0
Win32GetSecondsElapsed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BWindows.c
_TEXT	SEGMENT
Result$ = 32
Win32GetWallClock PROC

; 31   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 32   :     LARGE_INTEGER Result;
; 33   :     QueryPerformanceCounter(&Result);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR Result$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 34   :     return(Result);

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 35   : }

  00014	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00018	c3		 ret	 0
Win32GetWallClock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BWindows.c
_TEXT	SEGMENT
tv64 = 32
Result$ = 40
Window$ = 64
Message$ = 72
WParam$ = 80
LParam$ = 88
Win32WindowProc PROC

; 10   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 11   :     LRESULT Result = 0;

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 12   :     
; 13   :     switch(Message)

  00020	8b 44 24 48	 mov	 eax, DWORD PTR Message$[rsp]
  00024	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00028	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  0002d	74 02		 je	 SHORT $LN4@Win32Windo
  0002f	eb 0c		 jmp	 SHORT $LN5@Win32Windo
$LN4@Win32Windo:

; 14   :     {
; 15   :         case WM_CLOSE:
; 16   :         {
; 17   :             ShouldClose = true;

  00031	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ShouldClose, 1

; 18   :         } break;

  0003b	eb 1e		 jmp	 SHORT $LN2@Win32Windo
$LN5@Win32Windo:

; 19   :         
; 20   :         default:
; 21   :         {
; 22   :             Result = DefWindowProc(Window, Message, WParam, LParam);

  0003d	4c 8b 4c 24 58	 mov	 r9, QWORD PTR LParam$[rsp]
  00042	4c 8b 44 24 50	 mov	 r8, QWORD PTR WParam$[rsp]
  00047	8b 54 24 48	 mov	 edx, DWORD PTR Message$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Window$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcW
  00056	48 89 44 24 28	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32Windo:

; 23   :         } break;
; 24   :     }
; 25   :     
; 26   :     return(Result);

  0005b	48 8b 44 24 28	 mov	 rax, QWORD PTR Result$[rsp]

; 27   : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
Win32WindowProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
Rotation3$ = 192
Position3$ = 208
Scale3$ = 224
Result$ = 240
__$ArrayPad$ = 304
OutMat$ = 352
Position$ = 360
Scale$ = 368
Rotation$ = 376
Projection$ = 384
CreateTransform PROC

; 272  : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c4	 xor	 rax, rsp
  00028	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 273  :     mat4 Result = Mat4Identity();

  00030	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  00038	e8 00 00 00 00	 call	 Mat4Identity
  0003d	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  00045	48 8b f9	 mov	 rdi, rcx
  00048	48 8b f0	 mov	 rsi, rax
  0004b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00050	f3 a4		 rep movsb

; 274  :     
; 275  :     v3 Position3 = {Position.x, Position.y, 0.0f};

  00052	f3 0f 10 84 24
	68 01 00 00	 movss	 xmm0, DWORD PTR Position$[rsp]
  0005b	f3 0f 11 84 24
	d0 00 00 00	 movss	 DWORD PTR Position3$[rsp], xmm0
  00064	f3 0f 10 84 24
	6c 01 00 00	 movss	 xmm0, DWORD PTR Position$[rsp+4]
  0006d	f3 0f 11 84 24
	d4 00 00 00	 movss	 DWORD PTR Position3$[rsp+4], xmm0
  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 11 84 24
	d8 00 00 00	 movss	 DWORD PTR Position3$[rsp+8], xmm0

; 276  :     TranslateMat4(&Result, Position3);

  00082	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  00087	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR Position3$[rsp]
  0008f	48 8b f8	 mov	 rdi, rax
  00092	48 8b f1	 mov	 rsi, rcx
  00095	b9 0c 00 00 00	 mov	 ecx, 12
  0009a	f3 a4		 rep movsb
  0009c	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  000a1	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  000a9	e8 00 00 00 00	 call	 TranslateMat4

; 277  :     
; 278  :     // NOTE(evan): We get weird results when rotating {0, 0, 0}
; 279  :     v3 Rotation3 = {0.0f, 0.0f, Rotation*DEG_TO_RAD};

  000ae	0f 57 c0	 xorps	 xmm0, xmm0
  000b1	f3 0f 11 84 24
	c0 00 00 00	 movss	 DWORD PTR Rotation3$[rsp], xmm0
  000ba	0f 57 c0	 xorps	 xmm0, xmm0
  000bd	f3 0f 11 84 24
	c4 00 00 00	 movss	 DWORD PTR Rotation3$[rsp+4], xmm0
  000c6	f3 0f 10 84 24
	78 01 00 00	 movss	 xmm0, DWORD PTR Rotation$[rsp]
  000cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000d7	f3 0f 11 84 24
	c8 00 00 00	 movss	 DWORD PTR Rotation3$[rsp+8], xmm0

; 280  :     RotateMat4(&Result, V3Length(Rotation3), V3Normalize(Rotation3));

  000e0	48 8d 44 24 30	 lea	 rax, QWORD PTR $T2[rsp]
  000e5	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Rotation3$[rsp]
  000ed	48 8b f8	 mov	 rdi, rax
  000f0	48 8b f1	 mov	 rsi, rcx
  000f3	b9 0c 00 00 00	 mov	 ecx, 12
  000f8	f3 a4		 rep movsb
  000fa	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T2[rsp]
  000ff	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T6[rsp]
  00104	e8 00 00 00 00	 call	 V3Normalize
  00109	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  0010e	48 8b f9	 mov	 rdi, rcx
  00111	48 8b f0	 mov	 rsi, rax
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb
  0011b	48 8d 44 24 40	 lea	 rax, QWORD PTR $T3[rsp]
  00120	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Rotation3$[rsp]
  00128	48 8b f8	 mov	 rdi, rax
  0012b	48 8b f1	 mov	 rsi, rcx
  0012e	b9 0c 00 00 00	 mov	 ecx, 12
  00133	f3 a4		 rep movsb
  00135	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  0013a	e8 00 00 00 00	 call	 V3Length
  0013f	4c 8d 44 24 50	 lea	 r8, QWORD PTR $T4[rsp]
  00144	0f 28 c8	 movaps	 xmm1, xmm0
  00147	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  0014f	e8 00 00 00 00	 call	 RotateMat4

; 281  :     
; 282  :     v3 Scale3 = {Scale.x, Scale.y, 1.0f};

  00154	f3 0f 10 84 24
	70 01 00 00	 movss	 xmm0, DWORD PTR Scale$[rsp]
  0015d	f3 0f 11 84 24
	e0 00 00 00	 movss	 DWORD PTR Scale3$[rsp], xmm0
  00166	f3 0f 10 84 24
	74 01 00 00	 movss	 xmm0, DWORD PTR Scale$[rsp+4]
  0016f	f3 0f 11 84 24
	e4 00 00 00	 movss	 DWORD PTR Scale3$[rsp+4], xmm0
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00180	f3 0f 11 84 24
	e8 00 00 00	 movss	 DWORD PTR Scale3$[rsp+8], xmm0

; 283  :     ScaleMat4(&Result, Scale3);

  00189	48 8d 44 24 60	 lea	 rax, QWORD PTR $T5[rsp]
  0018e	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Scale3$[rsp]
  00196	48 8b f8	 mov	 rdi, rax
  00199	48 8b f1	 mov	 rsi, rcx
  0019c	b9 0c 00 00 00	 mov	 ecx, 12
  001a1	f3 a4		 rep movsb
  001a3	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T5[rsp]
  001a8	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR Result$[rsp]
  001b0	e8 00 00 00 00	 call	 ScaleMat4

; 284  :     
; 285  :     *OutMat = Result;

  001b5	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR Result$[rsp]
  001bd	48 8b bc 24 60
	01 00 00	 mov	 rdi, QWORD PTR OutMat$[rsp]
  001c5	48 8b f0	 mov	 rsi, rax
  001c8	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001cd	f3 a4		 rep movsb

; 286  : }

  001cf	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d7	48 33 cc	 xor	 rcx, rsp
  001da	e8 00 00 00 00	 call	 __security_check_cookie
  001df	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  001e6	5f		 pop	 rdi
  001e7	5e		 pop	 rsi
  001e8	c3		 ret	 0
CreateTransform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
OutMat$ = 160
Scale$ = 168
ScaleMat4 PROC

; 264  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 265  :     OutMat->e[0] = V4Scale(OutMat->e[0], Scale.x);

  00013	b8 10 00 00 00	 mov	 eax, 16
  00018	48 6b c0 00	 imul	 rax, rax, 0
  0001c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00021	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  00029	48 8b f9	 mov	 rdi, rcx
  0002c	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00030	b9 10 00 00 00	 mov	 ecx, 16
  00035	f3 a4		 rep movsb
  00037	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Scale$[rsp]
  0003f	f3 0f 10 10	 movss	 xmm2, DWORD PTR [rax]
  00043	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00048	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  0004d	e8 00 00 00 00	 call	 V4Scale
  00052	b9 10 00 00 00	 mov	 ecx, 16
  00057	48 6b c9 00	 imul	 rcx, rcx, 0
  0005b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  00063	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00067	48 8b f0	 mov	 rsi, rax
  0006a	b9 10 00 00 00	 mov	 ecx, 16
  0006f	f3 a4		 rep movsb

; 266  :     OutMat->e[1] = V4Scale(OutMat->e[1], Scale.y);

  00071	b8 10 00 00 00	 mov	 eax, 16
  00076	48 6b c0 01	 imul	 rax, rax, 1
  0007a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  0007f	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  00087	48 8b f9	 mov	 rdi, rcx
  0008a	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  0008e	b9 10 00 00 00	 mov	 ecx, 16
  00093	f3 a4		 rep movsb
  00095	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Scale$[rsp]
  0009d	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  000a2	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T2[rsp]
  000a7	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T5[rsp]
  000ac	e8 00 00 00 00	 call	 V4Scale
  000b1	b9 10 00 00 00	 mov	 ecx, 16
  000b6	48 6b c9 01	 imul	 rcx, rcx, 1
  000ba	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  000c2	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  000c6	48 8b f0	 mov	 rsi, rax
  000c9	b9 10 00 00 00	 mov	 ecx, 16
  000ce	f3 a4		 rep movsb

; 267  :     OutMat->e[2] = V4Scale(OutMat->e[2], Scale.z);

  000d0	b8 10 00 00 00	 mov	 eax, 16
  000d5	48 6b c0 02	 imul	 rax, rax, 2
  000d9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  000de	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  000e6	48 8b f9	 mov	 rdi, rcx
  000e9	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  000ed	b9 10 00 00 00	 mov	 ecx, 16
  000f2	f3 a4		 rep movsb
  000f4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR Scale$[rsp]
  000fc	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [rax+8]
  00101	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T3[rsp]
  00106	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T6[rsp]
  0010b	e8 00 00 00 00	 call	 V4Scale
  00110	b9 10 00 00 00	 mov	 ecx, 16
  00115	48 6b c9 02	 imul	 rcx, rcx, 2
  00119	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  00121	48 8d 3c 0a	 lea	 rdi, QWORD PTR [rdx+rcx]
  00125	48 8b f0	 mov	 rsi, rax
  00128	b9 10 00 00 00	 mov	 ecx, 16
  0012d	f3 a4		 rep movsb

; 268  : }

  0012f	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00136	5f		 pop	 rdi
  00137	5e		 pop	 rsi
  00138	c3		 ret	 0
ScaleMat4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
S$ = 32
C$ = 36
tv229 = 40
tv241 = 48
tv253 = 56
tv276 = 64
tv288 = 72
tv300 = 80
tv323 = 88
tv335 = 96
tv347 = 104
$T1 = 112
$T2 = 128
$T3 = 144
$T4 = 160
$T5 = 176
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
$T12 = 288
$T13 = 304
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
$T20 = 416
$T21 = 432
$T22 = 448
$T23 = 464
$T24 = 480
$T25 = 496
$T26 = 512
$T27 = 528
$T28 = 544
$T29 = 560
$T30 = 576
$T31 = 592
$T32 = 608
$T33 = 624
$T34 = 640
$T35 = 656
$T36 = 672
$T37 = 688
$T38 = 704
$T39 = 720
$T40 = 736
Axis$ = 752
Temp$ = 768
Third$ = 784
Second$ = 800
First$ = 816
Rotate$ = 832
Result$ = 896
__$ArrayPad$ = 960
OutMat$ = 1008
Angle$ = 1016
RawAxis$ = 1024
RotateMat4 PROC

; 218  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 219  :     f32 C = cosf(Angle);

  0002b	f3 0f 10 84 24
	f8 03 00 00	 movss	 xmm0, DWORD PTR Angle$[rsp]
  00034	e8 00 00 00 00	 call	 cosf
  00039	f3 0f 11 44 24
	24		 movss	 DWORD PTR C$[rsp], xmm0

; 220  :     f32 S = sinf(Angle);

  0003f	f3 0f 10 84 24
	f8 03 00 00	 movss	 xmm0, DWORD PTR Angle$[rsp]
  00048	e8 00 00 00 00	 call	 sinf
  0004d	f3 0f 11 44 24
	20		 movss	 DWORD PTR S$[rsp], xmm0

; 221  :     
; 222  :     v3 Axis = V3Normalize(RawAxis);

  00053	48 8d 44 24 70	 lea	 rax, QWORD PTR $T1[rsp]
  00058	48 8b f8	 mov	 rdi, rax
  0005b	48 8b b4 24 00
	04 00 00	 mov	 rsi, QWORD PTR RawAxis$[rsp]
  00063	b9 0c 00 00 00	 mov	 ecx, 12
  00068	f3 a4		 rep movsb
  0006a	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T1[rsp]
  0006f	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  00077	e8 00 00 00 00	 call	 V3Normalize
  0007c	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR Axis$[rsp]
  00084	48 8b f9	 mov	 rdi, rcx
  00087	48 8b f0	 mov	 rsi, rax
  0008a	b9 0c 00 00 00	 mov	 ecx, 12
  0008f	f3 a4		 rep movsb

; 223  :     v3 Temp = V3Scale(Axis, 1.0f - C);

  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00099	f3 0f 5c 44 24
	24		 subss	 xmm0, DWORD PTR C$[rsp]
  0009f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000a7	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR Axis$[rsp]
  000af	48 8b f8	 mov	 rdi, rax
  000b2	48 8b f1	 mov	 rsi, rcx
  000b5	b9 0c 00 00 00	 mov	 ecx, 12
  000ba	f3 a4		 rep movsb
  000bc	0f 28 d0	 movaps	 xmm2, xmm0
  000bf	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T2[rsp]
  000c7	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  000cf	e8 00 00 00 00	 call	 V3Scale
  000d4	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR Temp$[rsp]
  000dc	48 8b f9	 mov	 rdi, rcx
  000df	48 8b f0	 mov	 rsi, rax
  000e2	b9 0c 00 00 00	 mov	 ecx, 12
  000e7	f3 a4		 rep movsb

; 224  :     
; 225  :     mat4 Rotate = {0};

  000e9	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp]
  000f1	48 8b f8	 mov	 rdi, rax
  000f4	33 c0		 xor	 eax, eax
  000f6	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000fb	f3 aa		 rep stosb

; 226  :     Rotate.m[0][0] = C + Temp.e[0]*Axis.e[0];

  000fd	b8 04 00 00 00	 mov	 eax, 4
  00102	48 6b c0 00	 imul	 rax, rax, 0
  00106	b9 04 00 00 00	 mov	 ecx, 4
  0010b	48 6b c9 00	 imul	 rcx, rcx, 0
  0010f	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  00118	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  00121	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR C$[rsp]
  00127	f3 0f 58 c8	 addss	 xmm1, xmm0
  0012b	0f 28 c1	 movaps	 xmm0, xmm1
  0012e	b8 10 00 00 00	 mov	 eax, 16
  00133	48 6b c0 00	 imul	 rax, rax, 0
  00137	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0013f	b9 04 00 00 00	 mov	 ecx, 4
  00144	48 6b c9 00	 imul	 rcx, rcx, 0
  00148	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 227  :     Rotate.m[0][1] = Temp.e[0]*Axis.e[1] + S*Axis.e[2];

  0014d	b8 04 00 00 00	 mov	 eax, 4
  00152	48 6b c0 00	 imul	 rax, rax, 0
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	48 6b c9 01	 imul	 rcx, rcx, 1
  0015f	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  00168	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  00171	b8 04 00 00 00	 mov	 eax, 4
  00176	48 6b c0 02	 imul	 rax, rax, 2
  0017a	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR S$[rsp]
  00180	f3 0f 59 8c 04
	f0 02 00 00	 mulss	 xmm1, DWORD PTR Axis$[rsp+rax]
  00189	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018d	b8 10 00 00 00	 mov	 eax, 16
  00192	48 6b c0 00	 imul	 rax, rax, 0
  00196	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0019e	b9 04 00 00 00	 mov	 ecx, 4
  001a3	48 6b c9 01	 imul	 rcx, rcx, 1
  001a7	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 228  :     Rotate.m[0][2] = Temp.e[0]*Axis.e[2] - S*Axis.e[1];

  001ac	b8 04 00 00 00	 mov	 eax, 4
  001b1	48 6b c0 00	 imul	 rax, rax, 0
  001b5	b9 04 00 00 00	 mov	 ecx, 4
  001ba	48 6b c9 02	 imul	 rcx, rcx, 2
  001be	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  001c7	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  001d0	b8 04 00 00 00	 mov	 eax, 4
  001d5	48 6b c0 01	 imul	 rax, rax, 1
  001d9	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR S$[rsp]
  001df	f3 0f 59 8c 04
	f0 02 00 00	 mulss	 xmm1, DWORD PTR Axis$[rsp+rax]
  001e8	f3 0f 5c c1	 subss	 xmm0, xmm1
  001ec	b8 10 00 00 00	 mov	 eax, 16
  001f1	48 6b c0 00	 imul	 rax, rax, 0
  001f5	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  001fd	b9 04 00 00 00	 mov	 ecx, 4
  00202	48 6b c9 02	 imul	 rcx, rcx, 2
  00206	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 229  :     
; 230  :     Rotate.m[1][0] = Temp.e[1]*Axis.e[0] - S*Axis.e[2];

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	48 6b c0 01	 imul	 rax, rax, 1
  00214	b9 04 00 00 00	 mov	 ecx, 4
  00219	48 6b c9 00	 imul	 rcx, rcx, 0
  0021d	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  00226	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	48 6b c0 02	 imul	 rax, rax, 2
  00238	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR S$[rsp]
  0023e	f3 0f 59 8c 04
	f0 02 00 00	 mulss	 xmm1, DWORD PTR Axis$[rsp+rax]
  00247	f3 0f 5c c1	 subss	 xmm0, xmm1
  0024b	b8 10 00 00 00	 mov	 eax, 16
  00250	48 6b c0 01	 imul	 rax, rax, 1
  00254	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0025c	b9 04 00 00 00	 mov	 ecx, 4
  00261	48 6b c9 00	 imul	 rcx, rcx, 0
  00265	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 231  :     Rotate.m[1][1] = C + Temp.e[1]*Axis.e[1];

  0026a	b8 04 00 00 00	 mov	 eax, 4
  0026f	48 6b c0 01	 imul	 rax, rax, 1
  00273	b9 04 00 00 00	 mov	 ecx, 4
  00278	48 6b c9 01	 imul	 rcx, rcx, 1
  0027c	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  00285	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  0028e	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR C$[rsp]
  00294	f3 0f 58 c8	 addss	 xmm1, xmm0
  00298	0f 28 c1	 movaps	 xmm0, xmm1
  0029b	b8 10 00 00 00	 mov	 eax, 16
  002a0	48 6b c0 01	 imul	 rax, rax, 1
  002a4	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  002ac	b9 04 00 00 00	 mov	 ecx, 4
  002b1	48 6b c9 01	 imul	 rcx, rcx, 1
  002b5	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 232  :     Rotate.m[1][2] = Temp.e[1]*Axis.e[2] + S*Axis.e[0];

  002ba	b8 04 00 00 00	 mov	 eax, 4
  002bf	48 6b c0 01	 imul	 rax, rax, 1
  002c3	b9 04 00 00 00	 mov	 ecx, 4
  002c8	48 6b c9 02	 imul	 rcx, rcx, 2
  002cc	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  002d5	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  002de	b8 04 00 00 00	 mov	 eax, 4
  002e3	48 6b c0 00	 imul	 rax, rax, 0
  002e7	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR S$[rsp]
  002ed	f3 0f 59 8c 04
	f0 02 00 00	 mulss	 xmm1, DWORD PTR Axis$[rsp+rax]
  002f6	f3 0f 58 c1	 addss	 xmm0, xmm1
  002fa	b8 10 00 00 00	 mov	 eax, 16
  002ff	48 6b c0 01	 imul	 rax, rax, 1
  00303	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0030b	b9 04 00 00 00	 mov	 ecx, 4
  00310	48 6b c9 02	 imul	 rcx, rcx, 2
  00314	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 233  :     
; 234  :     Rotate.m[2][0] = Temp.e[2]*Axis.e[0] + S*Axis.e[1];

  00319	b8 04 00 00 00	 mov	 eax, 4
  0031e	48 6b c0 02	 imul	 rax, rax, 2
  00322	b9 04 00 00 00	 mov	 ecx, 4
  00327	48 6b c9 00	 imul	 rcx, rcx, 0
  0032b	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  00334	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  0033d	b8 04 00 00 00	 mov	 eax, 4
  00342	48 6b c0 01	 imul	 rax, rax, 1
  00346	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR S$[rsp]
  0034c	f3 0f 59 8c 04
	f0 02 00 00	 mulss	 xmm1, DWORD PTR Axis$[rsp+rax]
  00355	f3 0f 58 c1	 addss	 xmm0, xmm1
  00359	b8 10 00 00 00	 mov	 eax, 16
  0035e	48 6b c0 02	 imul	 rax, rax, 2
  00362	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0036a	b9 04 00 00 00	 mov	 ecx, 4
  0036f	48 6b c9 00	 imul	 rcx, rcx, 0
  00373	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 235  :     Rotate.m[2][1] = Temp.e[2]*Axis.e[1] - S*Axis.e[0];

  00378	b8 04 00 00 00	 mov	 eax, 4
  0037d	48 6b c0 02	 imul	 rax, rax, 2
  00381	b9 04 00 00 00	 mov	 ecx, 4
  00386	48 6b c9 01	 imul	 rcx, rcx, 1
  0038a	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  00393	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  0039c	b8 04 00 00 00	 mov	 eax, 4
  003a1	48 6b c0 00	 imul	 rax, rax, 0
  003a5	f3 0f 10 4c 24
	20		 movss	 xmm1, DWORD PTR S$[rsp]
  003ab	f3 0f 59 8c 04
	f0 02 00 00	 mulss	 xmm1, DWORD PTR Axis$[rsp+rax]
  003b4	f3 0f 5c c1	 subss	 xmm0, xmm1
  003b8	b8 10 00 00 00	 mov	 eax, 16
  003bd	48 6b c0 02	 imul	 rax, rax, 2
  003c1	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  003c9	b9 04 00 00 00	 mov	 ecx, 4
  003ce	48 6b c9 01	 imul	 rcx, rcx, 1
  003d2	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 236  :     Rotate.m[2][2] = C + Temp.e[2]*Axis.e[2];

  003d7	b8 04 00 00 00	 mov	 eax, 4
  003dc	48 6b c0 02	 imul	 rax, rax, 2
  003e0	b9 04 00 00 00	 mov	 ecx, 4
  003e5	48 6b c9 02	 imul	 rcx, rcx, 2
  003e9	f3 0f 10 84 04
	00 03 00 00	 movss	 xmm0, DWORD PTR Temp$[rsp+rax]
  003f2	f3 0f 59 84 0c
	f0 02 00 00	 mulss	 xmm0, DWORD PTR Axis$[rsp+rcx]
  003fb	f3 0f 10 4c 24
	24		 movss	 xmm1, DWORD PTR C$[rsp]
  00401	f3 0f 58 c8	 addss	 xmm1, xmm0
  00405	0f 28 c1	 movaps	 xmm0, xmm1
  00408	b8 10 00 00 00	 mov	 eax, 16
  0040d	48 6b c0 02	 imul	 rax, rax, 2
  00411	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  00419	b9 04 00 00 00	 mov	 ecx, 4
  0041e	48 6b c9 02	 imul	 rcx, rcx, 2
  00422	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 237  :     
; 238  :     v4 First, Second, Third;
; 239  :     
; 240  :     mat4 Result = {0};

  00427	48 8d 84 24 80
	03 00 00	 lea	 rax, QWORD PTR Result$[rsp]
  0042f	48 8b f8	 mov	 rdi, rax
  00432	33 c0		 xor	 eax, eax
  00434	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00439	f3 aa		 rep stosb

; 241  :     
; 242  :     First = V4Scale(OutMat->e[0], Rotate.m[0][0]);

  0043b	b8 10 00 00 00	 mov	 eax, 16
  00440	48 6b c0 00	 imul	 rax, rax, 0
  00444	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0044c	b9 04 00 00 00	 mov	 ecx, 4
  00451	48 6b c9 00	 imul	 rcx, rcx, 0
  00455	48 89 4c 24 28	 mov	 QWORD PTR tv229[rsp], rcx
  0045a	ba 10 00 00 00	 mov	 edx, 16
  0045f	48 6b d2 00	 imul	 rdx, rdx, 0
  00463	48 8d bc 24 00
	01 00 00	 lea	 rdi, QWORD PTR $T10[rsp]
  0046b	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  00473	48 03 f2	 add	 rsi, rdx
  00476	b9 10 00 00 00	 mov	 ecx, 16
  0047b	f3 a4		 rep movsb
  0047d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv229[rsp]
  00482	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  00487	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR $T10[rsp]
  0048f	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00497	e8 00 00 00 00	 call	 V4Scale
  0049c	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  004a4	48 8b f9	 mov	 rdi, rcx
  004a7	48 8b f0	 mov	 rsi, rax
  004aa	b9 10 00 00 00	 mov	 ecx, 16
  004af	f3 a4		 rep movsb

; 243  :     Second = V4Scale(OutMat->e[1], Rotate.m[0][1]);

  004b1	b8 10 00 00 00	 mov	 eax, 16
  004b6	48 6b c0 00	 imul	 rax, rax, 0
  004ba	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  004c2	b9 04 00 00 00	 mov	 ecx, 4
  004c7	48 6b c9 01	 imul	 rcx, rcx, 1
  004cb	48 89 4c 24 30	 mov	 QWORD PTR tv241[rsp], rcx
  004d0	ba 10 00 00 00	 mov	 edx, 16
  004d5	48 6b d2 01	 imul	 rdx, rdx, 1
  004d9	48 8d bc 24 10
	01 00 00	 lea	 rdi, QWORD PTR $T11[rsp]
  004e1	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  004e9	48 03 f2	 add	 rsi, rdx
  004ec	b9 10 00 00 00	 mov	 ecx, 16
  004f1	f3 a4		 rep movsb
  004f3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv241[rsp]
  004f8	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  004fd	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  00505	48 8d 8c 24 10
	02 00 00	 lea	 rcx, QWORD PTR $T27[rsp]
  0050d	e8 00 00 00 00	 call	 V4Scale
  00512	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  0051a	48 8b f9	 mov	 rdi, rcx
  0051d	48 8b f0	 mov	 rsi, rax
  00520	b9 10 00 00 00	 mov	 ecx, 16
  00525	f3 a4		 rep movsb

; 244  :     Third = V4Scale(OutMat->e[2], Rotate.m[0][2]);

  00527	b8 10 00 00 00	 mov	 eax, 16
  0052c	48 6b c0 00	 imul	 rax, rax, 0
  00530	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  00538	b9 04 00 00 00	 mov	 ecx, 4
  0053d	48 6b c9 02	 imul	 rcx, rcx, 2
  00541	48 89 4c 24 38	 mov	 QWORD PTR tv253[rsp], rcx
  00546	ba 10 00 00 00	 mov	 edx, 16
  0054b	48 6b d2 02	 imul	 rdx, rdx, 2
  0054f	48 8d bc 24 20
	01 00 00	 lea	 rdi, QWORD PTR $T12[rsp]
  00557	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  0055f	48 03 f2	 add	 rsi, rdx
  00562	b9 10 00 00 00	 mov	 ecx, 16
  00567	f3 a4		 rep movsb
  00569	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv253[rsp]
  0056e	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  00573	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  0057b	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00583	e8 00 00 00 00	 call	 V4Scale
  00588	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  00590	48 8b f9	 mov	 rdi, rcx
  00593	48 8b f0	 mov	 rsi, rax
  00596	b9 10 00 00 00	 mov	 ecx, 16
  0059b	f3 a4		 rep movsb

; 245  :     Result.e[0] = V4Add(V4Add(First, Second), Third);

  0059d	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR $T15[rsp]
  005a5	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  005ad	48 8b f8	 mov	 rdi, rax
  005b0	48 8b f1	 mov	 rsi, rcx
  005b3	b9 10 00 00 00	 mov	 ecx, 16
  005b8	f3 a4		 rep movsb
  005ba	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR $T13[rsp]
  005c2	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  005ca	48 8b f8	 mov	 rdi, rax
  005cd	48 8b f1	 mov	 rsi, rcx
  005d0	b9 10 00 00 00	 mov	 ecx, 16
  005d5	f3 a4		 rep movsb
  005d7	48 8d 84 24 40
	01 00 00	 lea	 rax, QWORD PTR $T14[rsp]
  005df	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  005e7	48 8b f8	 mov	 rdi, rax
  005ea	48 8b f1	 mov	 rsi, rcx
  005ed	b9 10 00 00 00	 mov	 ecx, 16
  005f2	f3 a4		 rep movsb
  005f4	4c 8d 84 24 30
	01 00 00	 lea	 r8, QWORD PTR $T13[rsp]
  005fc	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  00604	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR $T29[rsp]
  0060c	e8 00 00 00 00	 call	 V4Add
  00611	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  00619	48 8b f9	 mov	 rdi, rcx
  0061c	48 8b f0	 mov	 rsi, rax
  0061f	b9 10 00 00 00	 mov	 ecx, 16
  00624	f3 a4		 rep movsb
  00626	4c 8d 84 24 50
	01 00 00	 lea	 r8, QWORD PTR $T15[rsp]
  0062e	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00636	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  0063e	e8 00 00 00 00	 call	 V4Add
  00643	b9 10 00 00 00	 mov	 ecx, 16
  00648	48 6b c9 00	 imul	 rcx, rcx, 0
  0064c	48 8d bc 0c 80
	03 00 00	 lea	 rdi, QWORD PTR Result$[rsp+rcx]
  00654	48 8b f0	 mov	 rsi, rax
  00657	b9 10 00 00 00	 mov	 ecx, 16
  0065c	f3 a4		 rep movsb

; 246  :     
; 247  :     First = V4Scale(OutMat->e[0], Rotate.m[1][0]);

  0065e	b8 10 00 00 00	 mov	 eax, 16
  00663	48 6b c0 01	 imul	 rax, rax, 1
  00667	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0066f	b9 04 00 00 00	 mov	 ecx, 4
  00674	48 6b c9 00	 imul	 rcx, rcx, 0
  00678	48 89 4c 24 40	 mov	 QWORD PTR tv276[rsp], rcx
  0067d	ba 10 00 00 00	 mov	 edx, 16
  00682	48 6b d2 00	 imul	 rdx, rdx, 0
  00686	48 8d bc 24 70
	01 00 00	 lea	 rdi, QWORD PTR $T17[rsp]
  0068e	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  00696	48 03 f2	 add	 rsi, rdx
  00699	b9 10 00 00 00	 mov	 ecx, 16
  0069e	f3 a4		 rep movsb
  006a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv276[rsp]
  006a5	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  006aa	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR $T17[rsp]
  006b2	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR $T31[rsp]
  006ba	e8 00 00 00 00	 call	 V4Scale
  006bf	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  006c7	48 8b f9	 mov	 rdi, rcx
  006ca	48 8b f0	 mov	 rsi, rax
  006cd	b9 10 00 00 00	 mov	 ecx, 16
  006d2	f3 a4		 rep movsb

; 248  :     Second = V4Scale(OutMat->e[1], Rotate.m[1][1]);

  006d4	b8 10 00 00 00	 mov	 eax, 16
  006d9	48 6b c0 01	 imul	 rax, rax, 1
  006dd	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  006e5	b9 04 00 00 00	 mov	 ecx, 4
  006ea	48 6b c9 01	 imul	 rcx, rcx, 1
  006ee	48 89 4c 24 48	 mov	 QWORD PTR tv288[rsp], rcx
  006f3	ba 10 00 00 00	 mov	 edx, 16
  006f8	48 6b d2 01	 imul	 rdx, rdx, 1
  006fc	48 8d bc 24 80
	01 00 00	 lea	 rdi, QWORD PTR $T18[rsp]
  00704	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  0070c	48 03 f2	 add	 rsi, rdx
  0070f	b9 10 00 00 00	 mov	 ecx, 16
  00714	f3 a4		 rep movsb
  00716	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv288[rsp]
  0071b	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  00720	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR $T18[rsp]
  00728	48 8d 8c 24 60
	02 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00730	e8 00 00 00 00	 call	 V4Scale
  00735	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  0073d	48 8b f9	 mov	 rdi, rcx
  00740	48 8b f0	 mov	 rsi, rax
  00743	b9 10 00 00 00	 mov	 ecx, 16
  00748	f3 a4		 rep movsb

; 249  :     Third = V4Scale(OutMat->e[2], Rotate.m[1][2]);

  0074a	b8 10 00 00 00	 mov	 eax, 16
  0074f	48 6b c0 01	 imul	 rax, rax, 1
  00753	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0075b	b9 04 00 00 00	 mov	 ecx, 4
  00760	48 6b c9 02	 imul	 rcx, rcx, 2
  00764	48 89 4c 24 50	 mov	 QWORD PTR tv300[rsp], rcx
  00769	ba 10 00 00 00	 mov	 edx, 16
  0076e	48 6b d2 02	 imul	 rdx, rdx, 2
  00772	48 8d bc 24 90
	01 00 00	 lea	 rdi, QWORD PTR $T19[rsp]
  0077a	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  00782	48 03 f2	 add	 rsi, rdx
  00785	b9 10 00 00 00	 mov	 ecx, 16
  0078a	f3 a4		 rep movsb
  0078c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv300[rsp]
  00791	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  00796	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T19[rsp]
  0079e	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  007a6	e8 00 00 00 00	 call	 V4Scale
  007ab	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  007b3	48 8b f9	 mov	 rdi, rcx
  007b6	48 8b f0	 mov	 rsi, rax
  007b9	b9 10 00 00 00	 mov	 ecx, 16
  007be	f3 a4		 rep movsb

; 250  :     Result.e[1] = V4Add(V4Add(First, Second), Third);

  007c0	48 8d 84 24 c0
	01 00 00	 lea	 rax, QWORD PTR $T22[rsp]
  007c8	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  007d0	48 8b f8	 mov	 rdi, rax
  007d3	48 8b f1	 mov	 rsi, rcx
  007d6	b9 10 00 00 00	 mov	 ecx, 16
  007db	f3 a4		 rep movsb
  007dd	48 8d 84 24 a0
	01 00 00	 lea	 rax, QWORD PTR $T20[rsp]
  007e5	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  007ed	48 8b f8	 mov	 rdi, rax
  007f0	48 8b f1	 mov	 rsi, rcx
  007f3	b9 10 00 00 00	 mov	 ecx, 16
  007f8	f3 a4		 rep movsb
  007fa	48 8d 84 24 b0
	01 00 00	 lea	 rax, QWORD PTR $T21[rsp]
  00802	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  0080a	48 8b f8	 mov	 rdi, rax
  0080d	48 8b f1	 mov	 rsi, rcx
  00810	b9 10 00 00 00	 mov	 ecx, 16
  00815	f3 a4		 rep movsb
  00817	4c 8d 84 24 a0
	01 00 00	 lea	 r8, QWORD PTR $T20[rsp]
  0081f	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00827	48 8d 8c 24 80
	02 00 00	 lea	 rcx, QWORD PTR $T34[rsp]
  0082f	e8 00 00 00 00	 call	 V4Add
  00834	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR $T23[rsp]
  0083c	48 8b f9	 mov	 rdi, rcx
  0083f	48 8b f0	 mov	 rsi, rax
  00842	b9 10 00 00 00	 mov	 ecx, 16
  00847	f3 a4		 rep movsb
  00849	4c 8d 84 24 c0
	01 00 00	 lea	 r8, QWORD PTR $T22[rsp]
  00851	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  00859	48 8d 8c 24 90
	02 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  00861	e8 00 00 00 00	 call	 V4Add
  00866	b9 10 00 00 00	 mov	 ecx, 16
  0086b	48 6b c9 01	 imul	 rcx, rcx, 1
  0086f	48 8d bc 0c 80
	03 00 00	 lea	 rdi, QWORD PTR Result$[rsp+rcx]
  00877	48 8b f0	 mov	 rsi, rax
  0087a	b9 10 00 00 00	 mov	 ecx, 16
  0087f	f3 a4		 rep movsb

; 251  :     
; 252  :     First = V4Scale(OutMat->e[0], Rotate.m[2][0]);

  00881	b8 10 00 00 00	 mov	 eax, 16
  00886	48 6b c0 02	 imul	 rax, rax, 2
  0088a	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  00892	b9 04 00 00 00	 mov	 ecx, 4
  00897	48 6b c9 00	 imul	 rcx, rcx, 0
  0089b	48 89 4c 24 58	 mov	 QWORD PTR tv323[rsp], rcx
  008a0	ba 10 00 00 00	 mov	 edx, 16
  008a5	48 6b d2 00	 imul	 rdx, rdx, 0
  008a9	48 8d bc 24 90
	00 00 00	 lea	 rdi, QWORD PTR $T3[rsp]
  008b1	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  008b9	48 03 f2	 add	 rsi, rdx
  008bc	b9 10 00 00 00	 mov	 ecx, 16
  008c1	f3 a4		 rep movsb
  008c3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv323[rsp]
  008c8	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  008cd	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  008d5	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR $T36[rsp]
  008dd	e8 00 00 00 00	 call	 V4Scale
  008e2	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  008ea	48 8b f9	 mov	 rdi, rcx
  008ed	48 8b f0	 mov	 rsi, rax
  008f0	b9 10 00 00 00	 mov	 ecx, 16
  008f5	f3 a4		 rep movsb

; 253  :     Second = V4Scale(OutMat->e[1], Rotate.m[2][1]);

  008f7	b8 10 00 00 00	 mov	 eax, 16
  008fc	48 6b c0 02	 imul	 rax, rax, 2
  00900	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  00908	b9 04 00 00 00	 mov	 ecx, 4
  0090d	48 6b c9 01	 imul	 rcx, rcx, 1
  00911	48 89 4c 24 60	 mov	 QWORD PTR tv335[rsp], rcx
  00916	ba 10 00 00 00	 mov	 edx, 16
  0091b	48 6b d2 01	 imul	 rdx, rdx, 1
  0091f	48 8d bc 24 a0
	00 00 00	 lea	 rdi, QWORD PTR $T4[rsp]
  00927	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  0092f	48 03 f2	 add	 rsi, rdx
  00932	b9 10 00 00 00	 mov	 ecx, 16
  00937	f3 a4		 rep movsb
  00939	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv335[rsp]
  0093e	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  00943	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  0094b	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR $T37[rsp]
  00953	e8 00 00 00 00	 call	 V4Scale
  00958	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  00960	48 8b f9	 mov	 rdi, rcx
  00963	48 8b f0	 mov	 rsi, rax
  00966	b9 10 00 00 00	 mov	 ecx, 16
  0096b	f3 a4		 rep movsb

; 254  :     Third = V4Scale(OutMat->e[2], Rotate.m[2][2]);

  0096d	b8 10 00 00 00	 mov	 eax, 16
  00972	48 6b c0 02	 imul	 rax, rax, 2
  00976	48 8d 84 04 40
	03 00 00	 lea	 rax, QWORD PTR Rotate$[rsp+rax]
  0097e	b9 04 00 00 00	 mov	 ecx, 4
  00983	48 6b c9 02	 imul	 rcx, rcx, 2
  00987	48 89 4c 24 68	 mov	 QWORD PTR tv347[rsp], rcx
  0098c	ba 10 00 00 00	 mov	 edx, 16
  00991	48 6b d2 02	 imul	 rdx, rdx, 2
  00995	48 8d bc 24 b0
	00 00 00	 lea	 rdi, QWORD PTR $T5[rsp]
  0099d	48 8b b4 24 f0
	03 00 00	 mov	 rsi, QWORD PTR OutMat$[rsp]
  009a5	48 03 f2	 add	 rsi, rdx
  009a8	b9 10 00 00 00	 mov	 ecx, 16
  009ad	f3 a4		 rep movsb
  009af	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv347[rsp]
  009b4	f3 0f 10 14 08	 movss	 xmm2, DWORD PTR [rax+rcx]
  009b9	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR $T5[rsp]
  009c1	48 8d 8c 24 c0
	02 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  009c9	e8 00 00 00 00	 call	 V4Scale
  009ce	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  009d6	48 8b f9	 mov	 rdi, rcx
  009d9	48 8b f0	 mov	 rsi, rax
  009dc	b9 10 00 00 00	 mov	 ecx, 16
  009e1	f3 a4		 rep movsb

; 255  :     Result.e[2] = V4Add(V4Add(First, Second), Third);

  009e3	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  009eb	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  009f3	48 8b f8	 mov	 rdi, rax
  009f6	48 8b f1	 mov	 rsi, rcx
  009f9	b9 10 00 00 00	 mov	 ecx, 16
  009fe	f3 a4		 rep movsb
  00a00	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00a08	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  00a10	48 8b f8	 mov	 rdi, rax
  00a13	48 8b f1	 mov	 rsi, rcx
  00a16	b9 10 00 00 00	 mov	 ecx, 16
  00a1b	f3 a4		 rep movsb
  00a1d	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  00a25	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  00a2d	48 8b f8	 mov	 rdi, rax
  00a30	48 8b f1	 mov	 rsi, rcx
  00a33	b9 10 00 00 00	 mov	 ecx, 16
  00a38	f3 a4		 rep movsb
  00a3a	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  00a42	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR $T7[rsp]
  00a4a	48 8d 8c 24 d0
	02 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  00a52	e8 00 00 00 00	 call	 V4Add
  00a57	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T9[rsp]
  00a5f	48 8b f9	 mov	 rdi, rcx
  00a62	48 8b f0	 mov	 rsi, rax
  00a65	b9 10 00 00 00	 mov	 ecx, 16
  00a6a	f3 a4		 rep movsb
  00a6c	4c 8d 84 24 e0
	00 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  00a74	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR $T9[rsp]
  00a7c	48 8d 8c 24 e0
	02 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  00a84	e8 00 00 00 00	 call	 V4Add
  00a89	b9 10 00 00 00	 mov	 ecx, 16
  00a8e	48 6b c9 02	 imul	 rcx, rcx, 2
  00a92	48 8d bc 0c 80
	03 00 00	 lea	 rdi, QWORD PTR Result$[rsp+rcx]
  00a9a	48 8b f0	 mov	 rsi, rax
  00a9d	b9 10 00 00 00	 mov	 ecx, 16
  00aa2	f3 a4		 rep movsb

; 256  :     
; 257  :     Result.e[3] = OutMat->e[3];

  00aa4	b8 10 00 00 00	 mov	 eax, 16
  00aa9	48 6b c0 03	 imul	 rax, rax, 3
  00aad	b9 10 00 00 00	 mov	 ecx, 16
  00ab2	48 6b c9 03	 imul	 rcx, rcx, 3
  00ab6	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  00abe	48 8d bc 0c 80
	03 00 00	 lea	 rdi, QWORD PTR Result$[rsp+rcx]
  00ac6	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00aca	b9 10 00 00 00	 mov	 ecx, 16
  00acf	f3 a4		 rep movsb

; 258  :     
; 259  :     *OutMat = Result;

  00ad1	48 8d 84 24 80
	03 00 00	 lea	 rax, QWORD PTR Result$[rsp]
  00ad9	48 8b bc 24 f0
	03 00 00	 mov	 rdi, QWORD PTR OutMat$[rsp]
  00ae1	48 8b f0	 mov	 rsi, rax
  00ae4	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00ae9	f3 a4		 rep movsb

; 260  : }

  00aeb	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00af3	48 33 cc	 xor	 rcx, rsp
  00af6	e8 00 00 00 00	 call	 __security_check_cookie
  00afb	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  00b02	5f		 pop	 rdi
  00b03	5e		 pop	 rsi
  00b04	c3		 ret	 0
RotateMat4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
$T9 = 160
$T10 = 176
$T11 = 192
$T12 = 208
$T13 = 224
$T14 = 240
$T15 = 256
Final$ = 272
Second$ = 288
First$ = 304
Third$ = 320
__$ArrayPad$ = 336
OutMat$ = 384
Translation$ = 392
TranslateMat4 PROC

; 204  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 205  :     v4 First = V4Scale(OutMat->e[0], Translation.x);

  00025	b8 10 00 00 00	 mov	 eax, 16
  0002a	48 6b c0 00	 imul	 rax, rax, 0
  0002e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00033	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  0003b	48 8b f9	 mov	 rdi, rcx
  0003e	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00042	b9 10 00 00 00	 mov	 ecx, 16
  00047	f3 a4		 rep movsb
  00049	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR Translation$[rsp]
  00051	f3 0f 10 10	 movss	 xmm2, DWORD PTR [rax]
  00055	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0005a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  00062	e8 00 00 00 00	 call	 V4Scale
  00067	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  0006f	48 8b f9	 mov	 rdi, rcx
  00072	48 8b f0	 mov	 rsi, rax
  00075	b9 10 00 00 00	 mov	 ecx, 16
  0007a	f3 a4		 rep movsb

; 206  :     v4 Second = V4Scale(OutMat->e[1], Translation.y);

  0007c	b8 10 00 00 00	 mov	 eax, 16
  00081	48 6b c0 01	 imul	 rax, rax, 1
  00085	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  0008a	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  00092	48 8b f9	 mov	 rdi, rcx
  00095	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00099	b9 10 00 00 00	 mov	 ecx, 16
  0009e	f3 a4		 rep movsb
  000a0	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR Translation$[rsp]
  000a8	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [rax+4]
  000ad	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T2[rsp]
  000b2	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  000ba	e8 00 00 00 00	 call	 V4Scale
  000bf	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  000c7	48 8b f9	 mov	 rdi, rcx
  000ca	48 8b f0	 mov	 rsi, rax
  000cd	b9 10 00 00 00	 mov	 ecx, 16
  000d2	f3 a4		 rep movsb

; 207  :     v4 Third = V4Scale(OutMat->e[2], Translation.z);

  000d4	b8 10 00 00 00	 mov	 eax, 16
  000d9	48 6b c0 02	 imul	 rax, rax, 2
  000dd	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  000e2	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  000ea	48 8b f9	 mov	 rdi, rcx
  000ed	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  000f1	b9 10 00 00 00	 mov	 ecx, 16
  000f6	f3 a4		 rep movsb
  000f8	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR Translation$[rsp]
  00100	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [rax+8]
  00105	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T3[rsp]
  0010a	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T12[rsp]
  00112	e8 00 00 00 00	 call	 V4Scale
  00117	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  0011f	48 8b f9	 mov	 rdi, rcx
  00122	48 8b f0	 mov	 rsi, rax
  00125	b9 10 00 00 00	 mov	 ecx, 16
  0012a	f3 a4		 rep movsb

; 208  :     
; 209  :     v4 Final = V4Add(First, Second);

  0012c	48 8d 44 24 50	 lea	 rax, QWORD PTR $T4[rsp]
  00131	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR Second$[rsp]
  00139	48 8b f8	 mov	 rdi, rax
  0013c	48 8b f1	 mov	 rsi, rcx
  0013f	b9 10 00 00 00	 mov	 ecx, 16
  00144	f3 a4		 rep movsb
  00146	48 8d 44 24 60	 lea	 rax, QWORD PTR $T5[rsp]
  0014b	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR First$[rsp]
  00153	48 8b f8	 mov	 rdi, rax
  00156	48 8b f1	 mov	 rsi, rcx
  00159	b9 10 00 00 00	 mov	 ecx, 16
  0015e	f3 a4		 rep movsb
  00160	4c 8d 44 24 50	 lea	 r8, QWORD PTR $T4[rsp]
  00165	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T5[rsp]
  0016a	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T13[rsp]
  00172	e8 00 00 00 00	 call	 V4Add
  00177	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Final$[rsp]
  0017f	48 8b f9	 mov	 rdi, rcx
  00182	48 8b f0	 mov	 rsi, rax
  00185	b9 10 00 00 00	 mov	 ecx, 16
  0018a	f3 a4		 rep movsb

; 210  :     Final = V4Add(Final, Third);

  0018c	48 8d 44 24 70	 lea	 rax, QWORD PTR $T6[rsp]
  00191	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR Third$[rsp]
  00199	48 8b f8	 mov	 rdi, rax
  0019c	48 8b f1	 mov	 rsi, rcx
  0019f	b9 10 00 00 00	 mov	 ecx, 16
  001a4	f3 a4		 rep movsb
  001a6	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  001ae	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Final$[rsp]
  001b6	48 8b f8	 mov	 rdi, rax
  001b9	48 8b f1	 mov	 rsi, rcx
  001bc	b9 10 00 00 00	 mov	 ecx, 16
  001c1	f3 a4		 rep movsb
  001c3	4c 8d 44 24 70	 lea	 r8, QWORD PTR $T6[rsp]
  001c8	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T7[rsp]
  001d0	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  001d8	e8 00 00 00 00	 call	 V4Add
  001dd	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Final$[rsp]
  001e5	48 8b f9	 mov	 rdi, rcx
  001e8	48 8b f0	 mov	 rsi, rax
  001eb	b9 10 00 00 00	 mov	 ecx, 16
  001f0	f3 a4		 rep movsb

; 211  :     Final = V4Add(Final, OutMat->e[3]);

  001f2	b8 10 00 00 00	 mov	 eax, 16
  001f7	48 6b c0 03	 imul	 rax, rax, 3
  001fb	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  00203	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR OutMat$[rsp]
  0020b	48 8b f9	 mov	 rdi, rcx
  0020e	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  00212	b9 10 00 00 00	 mov	 ecx, 16
  00217	f3 a4		 rep movsb
  00219	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00221	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Final$[rsp]
  00229	48 8b f8	 mov	 rdi, rax
  0022c	48 8b f1	 mov	 rsi, rcx
  0022f	b9 10 00 00 00	 mov	 ecx, 16
  00234	f3 a4		 rep movsb
  00236	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  0023e	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T9[rsp]
  00246	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR $T15[rsp]
  0024e	e8 00 00 00 00	 call	 V4Add
  00253	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Final$[rsp]
  0025b	48 8b f9	 mov	 rdi, rcx
  0025e	48 8b f0	 mov	 rsi, rax
  00261	b9 10 00 00 00	 mov	 ecx, 16
  00266	f3 a4		 rep movsb

; 212  :     
; 213  :     OutMat->e[3] = Final;

  00268	b8 10 00 00 00	 mov	 eax, 16
  0026d	48 6b c0 03	 imul	 rax, rax, 3
  00271	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR OutMat$[rsp]
  00279	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR Final$[rsp]
  00281	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  00285	48 8b f2	 mov	 rsi, rdx
  00288	b9 10 00 00 00	 mov	 ecx, 16
  0028d	f3 a4		 rep movsb

; 214  : }

  0028f	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00297	48 33 cc	 xor	 rcx, rsp
  0029a	e8 00 00 00 00	 call	 __security_check_cookie
  0029f	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  002a6	5f		 pop	 rdi
  002a7	5e		 pop	 rsi
  002a8	c3		 ret	 0
TranslateMat4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
$T1 = 32
Result$ = 96
__$ArrayPad$ = 160
OutMat$ = 208
Left$ = 216
Right$ = 224
Top$ = 232
Bottom$ = 240
Near$ = 248
Far$ = 256
CreateOrthographic PROC

; 190  : {

  00000	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [rsp+32], xmm3
  00006	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  0000c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	56		 push	 rsi
  00018	57		 push	 rdi
  00019	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c4	 xor	 rax, rsp
  0002a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 191  :     mat4 Result = Mat4Identity();

  00032	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00037	e8 00 00 00 00	 call	 Mat4Identity
  0003c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR Result$[rsp]
  00041	48 8b f9	 mov	 rdi, rcx
  00044	48 8b f0	 mov	 rsi, rax
  00047	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0004c	f3 a4		 rep movsb

; 192  :     Result.m[0][0] = 2.0f / (Right - Left);

  0004e	f3 0f 10 84 24
	e0 00 00 00	 movss	 xmm0, DWORD PTR Right$[rsp]
  00057	f3 0f 5c 84 24
	d8 00 00 00	 subss	 xmm0, DWORD PTR Left$[rsp]
  00060	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00068	f3 0f 5e c8	 divss	 xmm1, xmm0
  0006c	0f 28 c1	 movaps	 xmm0, xmm1
  0006f	b8 10 00 00 00	 mov	 eax, 16
  00074	48 6b c0 00	 imul	 rax, rax, 0
  00078	48 8d 44 04 60	 lea	 rax, QWORD PTR Result$[rsp+rax]
  0007d	b9 04 00 00 00	 mov	 ecx, 4
  00082	48 6b c9 00	 imul	 rcx, rcx, 0
  00086	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 193  :     Result.m[1][1] = 2.0f / (Top - Bottom);

  0008b	f3 0f 10 84 24
	e8 00 00 00	 movss	 xmm0, DWORD PTR Top$[rsp]
  00094	f3 0f 5c 84 24
	f0 00 00 00	 subss	 xmm0, DWORD PTR Bottom$[rsp]
  0009d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000a5	f3 0f 5e c8	 divss	 xmm1, xmm0
  000a9	0f 28 c1	 movaps	 xmm0, xmm1
  000ac	b8 10 00 00 00	 mov	 eax, 16
  000b1	48 6b c0 01	 imul	 rax, rax, 1
  000b5	48 8d 44 04 60	 lea	 rax, QWORD PTR Result$[rsp+rax]
  000ba	b9 04 00 00 00	 mov	 ecx, 4
  000bf	48 6b c9 01	 imul	 rcx, rcx, 1
  000c3	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 194  :     Result.m[2][2] = -2.0f / (Far - Near);

  000c8	f3 0f 10 84 24
	00 01 00 00	 movss	 xmm0, DWORD PTR Far$[rsp]
  000d1	f3 0f 5c 84 24
	f8 00 00 00	 subss	 xmm0, DWORD PTR Near$[rsp]
  000da	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c0000000
  000e2	f3 0f 5e c8	 divss	 xmm1, xmm0
  000e6	0f 28 c1	 movaps	 xmm0, xmm1
  000e9	b8 10 00 00 00	 mov	 eax, 16
  000ee	48 6b c0 02	 imul	 rax, rax, 2
  000f2	48 8d 44 04 60	 lea	 rax, QWORD PTR Result$[rsp+rax]
  000f7	b9 04 00 00 00	 mov	 ecx, 4
  000fc	48 6b c9 02	 imul	 rcx, rcx, 2
  00100	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 195  :     Result.m[3][0] = -(Right + Left) / (Right - Left);

  00105	f3 0f 10 84 24
	e0 00 00 00	 movss	 xmm0, DWORD PTR Right$[rsp]
  0010e	f3 0f 58 84 24
	d8 00 00 00	 addss	 xmm0, DWORD PTR Left$[rsp]
  00117	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0011e	f3 0f 10 8c 24
	e0 00 00 00	 movss	 xmm1, DWORD PTR Right$[rsp]
  00127	f3 0f 5c 8c 24
	d8 00 00 00	 subss	 xmm1, DWORD PTR Left$[rsp]
  00130	f3 0f 5e c1	 divss	 xmm0, xmm1
  00134	b8 10 00 00 00	 mov	 eax, 16
  00139	48 6b c0 03	 imul	 rax, rax, 3
  0013d	48 8d 44 04 60	 lea	 rax, QWORD PTR Result$[rsp+rax]
  00142	b9 04 00 00 00	 mov	 ecx, 4
  00147	48 6b c9 00	 imul	 rcx, rcx, 0
  0014b	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 196  :     Result.m[3][1] = -(Top + Bottom) / (Top - Bottom);

  00150	f3 0f 10 84 24
	e8 00 00 00	 movss	 xmm0, DWORD PTR Top$[rsp]
  00159	f3 0f 58 84 24
	f0 00 00 00	 addss	 xmm0, DWORD PTR Bottom$[rsp]
  00162	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00169	f3 0f 10 8c 24
	e8 00 00 00	 movss	 xmm1, DWORD PTR Top$[rsp]
  00172	f3 0f 5c 8c 24
	f0 00 00 00	 subss	 xmm1, DWORD PTR Bottom$[rsp]
  0017b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0017f	b8 10 00 00 00	 mov	 eax, 16
  00184	48 6b c0 03	 imul	 rax, rax, 3
  00188	48 8d 44 04 60	 lea	 rax, QWORD PTR Result$[rsp+rax]
  0018d	b9 04 00 00 00	 mov	 ecx, 4
  00192	48 6b c9 01	 imul	 rcx, rcx, 1
  00196	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 197  :     Result.m[3][2] = -(Far + Near) / (Far - Near);

  0019b	f3 0f 10 84 24
	00 01 00 00	 movss	 xmm0, DWORD PTR Far$[rsp]
  001a4	f3 0f 58 84 24
	f8 00 00 00	 addss	 xmm0, DWORD PTR Near$[rsp]
  001ad	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001b4	f3 0f 10 8c 24
	00 01 00 00	 movss	 xmm1, DWORD PTR Far$[rsp]
  001bd	f3 0f 5c 8c 24
	f8 00 00 00	 subss	 xmm1, DWORD PTR Near$[rsp]
  001c6	f3 0f 5e c1	 divss	 xmm0, xmm1
  001ca	b8 10 00 00 00	 mov	 eax, 16
  001cf	48 6b c0 03	 imul	 rax, rax, 3
  001d3	48 8d 44 04 60	 lea	 rax, QWORD PTR Result$[rsp+rax]
  001d8	b9 04 00 00 00	 mov	 ecx, 4
  001dd	48 6b c9 02	 imul	 rcx, rcx, 2
  001e1	f3 0f 11 04 08	 movss	 DWORD PTR [rax+rcx], xmm0

; 198  :     
; 199  :     *OutMat = Result;

  001e6	48 8d 44 24 60	 lea	 rax, QWORD PTR Result$[rsp]
  001eb	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR OutMat$[rsp]
  001f3	48 8b f0	 mov	 rsi, rax
  001f6	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001fb	f3 a4		 rep movsb

; 200  : }

  001fd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00205	48 33 cc	 xor	 rcx, rsp
  00208	e8 00 00 00 00	 call	 __security_check_cookie
  0020d	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00214	5f		 pop	 rdi
  00215	5e		 pop	 rsi
  00216	c3		 ret	 0
CreateOrthographic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Result$ = 0
__$ArrayPad$ = 64
OutMat$ = 112
A$ = 120
B$ = 128
Mat4Multiply PROC

; 161  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 162  :     mat4 Result =

  00024	b8 10 00 00 00	 mov	 eax, 16
  00029	48 6b c0 00	 imul	 rax, rax, 0
  0002d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00032	48 03 c8	 add	 rcx, rax
  00035	48 8b c1	 mov	 rax, rcx
  00038	b9 04 00 00 00	 mov	 ecx, 4
  0003d	48 6b c9 00	 imul	 rcx, rcx, 0
  00041	ba 10 00 00 00	 mov	 edx, 16
  00046	48 6b d2 00	 imul	 rdx, rdx, 0
  0004a	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00052	4c 03 c2	 add	 r8, rdx
  00055	49 8b d0	 mov	 rdx, r8
  00058	41 b8 04 00 00
	00		 mov	 r8d, 4
  0005e	4d 6b c0 00	 imul	 r8, r8, 0
  00062	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00067	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  0006d	b8 10 00 00 00	 mov	 eax, 16
  00072	48 6b c0 00	 imul	 rax, rax, 0
  00076	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	48 6b c9 01	 imul	 rcx, rcx, 1
  0008a	ba 10 00 00 00	 mov	 edx, 16
  0008f	48 6b d2 01	 imul	 rdx, rdx, 1
  00093	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0009b	4c 03 c2	 add	 r8, rdx
  0009e	49 8b d0	 mov	 rdx, r8
  000a1	41 b8 04 00 00
	00		 mov	 r8d, 4
  000a7	4d 6b c0 00	 imul	 r8, r8, 0
  000ab	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  000b0	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  000b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  000ba	b8 10 00 00 00	 mov	 eax, 16
  000bf	48 6b c0 00	 imul	 rax, rax, 0
  000c3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	b9 04 00 00 00	 mov	 ecx, 4
  000d3	48 6b c9 02	 imul	 rcx, rcx, 2
  000d7	ba 10 00 00 00	 mov	 edx, 16
  000dc	48 6b d2 02	 imul	 rdx, rdx, 2
  000e0	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  000e8	4c 03 c2	 add	 r8, rdx
  000eb	49 8b d0	 mov	 rdx, r8
  000ee	41 b8 04 00 00
	00		 mov	 r8d, 4
  000f4	4d 6b c0 00	 imul	 r8, r8, 0
  000f8	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  000fd	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00103	f3 0f 58 c1	 addss	 xmm0, xmm1
  00107	b8 10 00 00 00	 mov	 eax, 16
  0010c	48 6b c0 00	 imul	 rax, rax, 0
  00110	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00115	48 03 c8	 add	 rcx, rax
  00118	48 8b c1	 mov	 rax, rcx
  0011b	b9 04 00 00 00	 mov	 ecx, 4
  00120	48 6b c9 03	 imul	 rcx, rcx, 3
  00124	ba 10 00 00 00	 mov	 edx, 16
  00129	48 6b d2 03	 imul	 rdx, rdx, 3
  0012d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00135	4c 03 c2	 add	 r8, rdx
  00138	49 8b d0	 mov	 rdx, r8
  0013b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00141	4d 6b c0 00	 imul	 r8, r8, 0
  00145	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0014a	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
  00154	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0
  00159	b8 10 00 00 00	 mov	 eax, 16
  0015e	48 6b c0 00	 imul	 rax, rax, 0
  00162	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00167	48 03 c8	 add	 rcx, rax
  0016a	48 8b c1	 mov	 rax, rcx
  0016d	b9 04 00 00 00	 mov	 ecx, 4
  00172	48 6b c9 00	 imul	 rcx, rcx, 0
  00176	ba 10 00 00 00	 mov	 edx, 16
  0017b	48 6b d2 00	 imul	 rdx, rdx, 0
  0017f	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00187	4c 03 c2	 add	 r8, rdx
  0018a	49 8b d0	 mov	 rdx, r8
  0018d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00193	4d 6b c0 01	 imul	 r8, r8, 1
  00197	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  0019c	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  001a2	b8 10 00 00 00	 mov	 eax, 16
  001a7	48 6b c0 00	 imul	 rax, rax, 0
  001ab	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  001b0	48 03 c8	 add	 rcx, rax
  001b3	48 8b c1	 mov	 rax, rcx
  001b6	b9 04 00 00 00	 mov	 ecx, 4
  001bb	48 6b c9 01	 imul	 rcx, rcx, 1
  001bf	ba 10 00 00 00	 mov	 edx, 16
  001c4	48 6b d2 01	 imul	 rdx, rdx, 1
  001c8	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  001d0	4c 03 c2	 add	 r8, rdx
  001d3	49 8b d0	 mov	 rdx, r8
  001d6	41 b8 04 00 00
	00		 mov	 r8d, 4
  001dc	4d 6b c0 01	 imul	 r8, r8, 1
  001e0	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  001e5	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  001eb	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ef	b8 10 00 00 00	 mov	 eax, 16
  001f4	48 6b c0 00	 imul	 rax, rax, 0
  001f8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  001fd	48 03 c8	 add	 rcx, rax
  00200	48 8b c1	 mov	 rax, rcx
  00203	b9 04 00 00 00	 mov	 ecx, 4
  00208	48 6b c9 02	 imul	 rcx, rcx, 2
  0020c	ba 10 00 00 00	 mov	 edx, 16
  00211	48 6b d2 02	 imul	 rdx, rdx, 2
  00215	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0021d	4c 03 c2	 add	 r8, rdx
  00220	49 8b d0	 mov	 rdx, r8
  00223	41 b8 04 00 00
	00		 mov	 r8d, 4
  00229	4d 6b c0 01	 imul	 r8, r8, 1
  0022d	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00232	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00238	f3 0f 58 c1	 addss	 xmm0, xmm1
  0023c	b8 10 00 00 00	 mov	 eax, 16
  00241	48 6b c0 00	 imul	 rax, rax, 0
  00245	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0024a	48 03 c8	 add	 rcx, rax
  0024d	48 8b c1	 mov	 rax, rcx
  00250	b9 04 00 00 00	 mov	 ecx, 4
  00255	48 6b c9 03	 imul	 rcx, rcx, 3
  00259	ba 10 00 00 00	 mov	 edx, 16
  0025e	48 6b d2 03	 imul	 rdx, rdx, 3
  00262	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0026a	4c 03 c2	 add	 r8, rdx
  0026d	49 8b d0	 mov	 rdx, r8
  00270	41 b8 04 00 00
	00		 mov	 r8d, 4
  00276	4d 6b c0 01	 imul	 r8, r8, 1
  0027a	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0027f	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00285	f3 0f 58 c1	 addss	 xmm0, xmm1
  00289	f3 0f 11 44 24
	04		 movss	 DWORD PTR Result$[rsp+4], xmm0
  0028f	b8 10 00 00 00	 mov	 eax, 16
  00294	48 6b c0 00	 imul	 rax, rax, 0
  00298	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0029d	48 03 c8	 add	 rcx, rax
  002a0	48 8b c1	 mov	 rax, rcx
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	48 6b c9 00	 imul	 rcx, rcx, 0
  002ac	ba 10 00 00 00	 mov	 edx, 16
  002b1	48 6b d2 00	 imul	 rdx, rdx, 0
  002b5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  002bd	4c 03 c2	 add	 r8, rdx
  002c0	49 8b d0	 mov	 rdx, r8
  002c3	41 b8 04 00 00
	00		 mov	 r8d, 4
  002c9	4d 6b c0 02	 imul	 r8, r8, 2
  002cd	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  002d2	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  002d8	b8 10 00 00 00	 mov	 eax, 16
  002dd	48 6b c0 00	 imul	 rax, rax, 0
  002e1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  002e6	48 03 c8	 add	 rcx, rax
  002e9	48 8b c1	 mov	 rax, rcx
  002ec	b9 04 00 00 00	 mov	 ecx, 4
  002f1	48 6b c9 01	 imul	 rcx, rcx, 1
  002f5	ba 10 00 00 00	 mov	 edx, 16
  002fa	48 6b d2 01	 imul	 rdx, rdx, 1
  002fe	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00306	4c 03 c2	 add	 r8, rdx
  00309	49 8b d0	 mov	 rdx, r8
  0030c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00312	4d 6b c0 02	 imul	 r8, r8, 2
  00316	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0031b	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00321	f3 0f 58 c1	 addss	 xmm0, xmm1
  00325	b8 10 00 00 00	 mov	 eax, 16
  0032a	48 6b c0 00	 imul	 rax, rax, 0
  0032e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00333	48 03 c8	 add	 rcx, rax
  00336	48 8b c1	 mov	 rax, rcx
  00339	b9 04 00 00 00	 mov	 ecx, 4
  0033e	48 6b c9 02	 imul	 rcx, rcx, 2
  00342	ba 10 00 00 00	 mov	 edx, 16
  00347	48 6b d2 02	 imul	 rdx, rdx, 2
  0034b	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00353	4c 03 c2	 add	 r8, rdx
  00356	49 8b d0	 mov	 rdx, r8
  00359	41 b8 04 00 00
	00		 mov	 r8d, 4
  0035f	4d 6b c0 02	 imul	 r8, r8, 2
  00363	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00368	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0036e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00372	b8 10 00 00 00	 mov	 eax, 16
  00377	48 6b c0 00	 imul	 rax, rax, 0
  0037b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00380	48 03 c8	 add	 rcx, rax
  00383	48 8b c1	 mov	 rax, rcx
  00386	b9 04 00 00 00	 mov	 ecx, 4
  0038b	48 6b c9 03	 imul	 rcx, rcx, 3
  0038f	ba 10 00 00 00	 mov	 edx, 16
  00394	48 6b d2 03	 imul	 rdx, rdx, 3
  00398	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  003a0	4c 03 c2	 add	 r8, rdx
  003a3	49 8b d0	 mov	 rdx, r8
  003a6	41 b8 04 00 00
	00		 mov	 r8d, 4
  003ac	4d 6b c0 02	 imul	 r8, r8, 2
  003b0	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  003b5	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  003bb	f3 0f 58 c1	 addss	 xmm0, xmm1
  003bf	f3 0f 11 44 24
	08		 movss	 DWORD PTR Result$[rsp+8], xmm0
  003c5	b8 10 00 00 00	 mov	 eax, 16
  003ca	48 6b c0 00	 imul	 rax, rax, 0
  003ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  003d3	48 03 c8	 add	 rcx, rax
  003d6	48 8b c1	 mov	 rax, rcx
  003d9	b9 04 00 00 00	 mov	 ecx, 4
  003de	48 6b c9 00	 imul	 rcx, rcx, 0
  003e2	ba 10 00 00 00	 mov	 edx, 16
  003e7	48 6b d2 00	 imul	 rdx, rdx, 0
  003eb	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  003f3	4c 03 c2	 add	 r8, rdx
  003f6	49 8b d0	 mov	 rdx, r8
  003f9	41 b8 04 00 00
	00		 mov	 r8d, 4
  003ff	4d 6b c0 03	 imul	 r8, r8, 3
  00403	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00408	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  0040e	b8 10 00 00 00	 mov	 eax, 16
  00413	48 6b c0 00	 imul	 rax, rax, 0
  00417	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0041c	48 03 c8	 add	 rcx, rax
  0041f	48 8b c1	 mov	 rax, rcx
  00422	b9 04 00 00 00	 mov	 ecx, 4
  00427	48 6b c9 01	 imul	 rcx, rcx, 1
  0042b	ba 10 00 00 00	 mov	 edx, 16
  00430	48 6b d2 01	 imul	 rdx, rdx, 1
  00434	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0043c	4c 03 c2	 add	 r8, rdx
  0043f	49 8b d0	 mov	 rdx, r8
  00442	41 b8 04 00 00
	00		 mov	 r8d, 4
  00448	4d 6b c0 03	 imul	 r8, r8, 3
  0044c	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00451	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00457	f3 0f 58 c1	 addss	 xmm0, xmm1
  0045b	b8 10 00 00 00	 mov	 eax, 16
  00460	48 6b c0 00	 imul	 rax, rax, 0
  00464	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00469	48 03 c8	 add	 rcx, rax
  0046c	48 8b c1	 mov	 rax, rcx
  0046f	b9 04 00 00 00	 mov	 ecx, 4
  00474	48 6b c9 02	 imul	 rcx, rcx, 2
  00478	ba 10 00 00 00	 mov	 edx, 16
  0047d	48 6b d2 02	 imul	 rdx, rdx, 2
  00481	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00489	4c 03 c2	 add	 r8, rdx
  0048c	49 8b d0	 mov	 rdx, r8
  0048f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00495	4d 6b c0 03	 imul	 r8, r8, 3
  00499	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0049e	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  004a4	f3 0f 58 c1	 addss	 xmm0, xmm1
  004a8	b8 10 00 00 00	 mov	 eax, 16
  004ad	48 6b c0 00	 imul	 rax, rax, 0
  004b1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  004b6	48 03 c8	 add	 rcx, rax
  004b9	48 8b c1	 mov	 rax, rcx
  004bc	b9 04 00 00 00	 mov	 ecx, 4
  004c1	48 6b c9 03	 imul	 rcx, rcx, 3
  004c5	ba 10 00 00 00	 mov	 edx, 16
  004ca	48 6b d2 03	 imul	 rdx, rdx, 3
  004ce	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  004d6	4c 03 c2	 add	 r8, rdx
  004d9	49 8b d0	 mov	 rdx, r8
  004dc	41 b8 04 00 00
	00		 mov	 r8d, 4
  004e2	4d 6b c0 03	 imul	 r8, r8, 3
  004e6	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  004eb	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  004f1	f3 0f 58 c1	 addss	 xmm0, xmm1
  004f5	f3 0f 11 44 24
	0c		 movss	 DWORD PTR Result$[rsp+12], xmm0
  004fb	b8 10 00 00 00	 mov	 eax, 16
  00500	48 6b c0 01	 imul	 rax, rax, 1
  00504	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00509	48 03 c8	 add	 rcx, rax
  0050c	48 8b c1	 mov	 rax, rcx
  0050f	b9 04 00 00 00	 mov	 ecx, 4
  00514	48 6b c9 00	 imul	 rcx, rcx, 0
  00518	ba 10 00 00 00	 mov	 edx, 16
  0051d	48 6b d2 00	 imul	 rdx, rdx, 0
  00521	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00529	4c 03 c2	 add	 r8, rdx
  0052c	49 8b d0	 mov	 rdx, r8
  0052f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00535	4d 6b c0 00	 imul	 r8, r8, 0
  00539	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  0053e	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  00544	b8 10 00 00 00	 mov	 eax, 16
  00549	48 6b c0 01	 imul	 rax, rax, 1
  0054d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00552	48 03 c8	 add	 rcx, rax
  00555	48 8b c1	 mov	 rax, rcx
  00558	b9 04 00 00 00	 mov	 ecx, 4
  0055d	48 6b c9 01	 imul	 rcx, rcx, 1
  00561	ba 10 00 00 00	 mov	 edx, 16
  00566	48 6b d2 01	 imul	 rdx, rdx, 1
  0056a	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00572	4c 03 c2	 add	 r8, rdx
  00575	49 8b d0	 mov	 rdx, r8
  00578	41 b8 04 00 00
	00		 mov	 r8d, 4
  0057e	4d 6b c0 00	 imul	 r8, r8, 0
  00582	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00587	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0058d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00591	b8 10 00 00 00	 mov	 eax, 16
  00596	48 6b c0 01	 imul	 rax, rax, 1
  0059a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0059f	48 03 c8	 add	 rcx, rax
  005a2	48 8b c1	 mov	 rax, rcx
  005a5	b9 04 00 00 00	 mov	 ecx, 4
  005aa	48 6b c9 02	 imul	 rcx, rcx, 2
  005ae	ba 10 00 00 00	 mov	 edx, 16
  005b3	48 6b d2 02	 imul	 rdx, rdx, 2
  005b7	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  005bf	4c 03 c2	 add	 r8, rdx
  005c2	49 8b d0	 mov	 rdx, r8
  005c5	41 b8 04 00 00
	00		 mov	 r8d, 4
  005cb	4d 6b c0 00	 imul	 r8, r8, 0
  005cf	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  005d4	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  005da	f3 0f 58 c1	 addss	 xmm0, xmm1
  005de	b8 10 00 00 00	 mov	 eax, 16
  005e3	48 6b c0 01	 imul	 rax, rax, 1
  005e7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  005ec	48 03 c8	 add	 rcx, rax
  005ef	48 8b c1	 mov	 rax, rcx
  005f2	b9 04 00 00 00	 mov	 ecx, 4
  005f7	48 6b c9 03	 imul	 rcx, rcx, 3
  005fb	ba 10 00 00 00	 mov	 edx, 16
  00600	48 6b d2 03	 imul	 rdx, rdx, 3
  00604	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0060c	4c 03 c2	 add	 r8, rdx
  0060f	49 8b d0	 mov	 rdx, r8
  00612	41 b8 04 00 00
	00		 mov	 r8d, 4
  00618	4d 6b c0 00	 imul	 r8, r8, 0
  0061c	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00621	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00627	f3 0f 58 c1	 addss	 xmm0, xmm1
  0062b	f3 0f 11 44 24
	10		 movss	 DWORD PTR Result$[rsp+16], xmm0
  00631	b8 10 00 00 00	 mov	 eax, 16
  00636	48 6b c0 01	 imul	 rax, rax, 1
  0063a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0063f	48 03 c8	 add	 rcx, rax
  00642	48 8b c1	 mov	 rax, rcx
  00645	b9 04 00 00 00	 mov	 ecx, 4
  0064a	48 6b c9 00	 imul	 rcx, rcx, 0
  0064e	ba 10 00 00 00	 mov	 edx, 16
  00653	48 6b d2 00	 imul	 rdx, rdx, 0
  00657	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0065f	4c 03 c2	 add	 r8, rdx
  00662	49 8b d0	 mov	 rdx, r8
  00665	41 b8 04 00 00
	00		 mov	 r8d, 4
  0066b	4d 6b c0 01	 imul	 r8, r8, 1
  0066f	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00674	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  0067a	b8 10 00 00 00	 mov	 eax, 16
  0067f	48 6b c0 01	 imul	 rax, rax, 1
  00683	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00688	48 03 c8	 add	 rcx, rax
  0068b	48 8b c1	 mov	 rax, rcx
  0068e	b9 04 00 00 00	 mov	 ecx, 4
  00693	48 6b c9 01	 imul	 rcx, rcx, 1
  00697	ba 10 00 00 00	 mov	 edx, 16
  0069c	48 6b d2 01	 imul	 rdx, rdx, 1
  006a0	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  006a8	4c 03 c2	 add	 r8, rdx
  006ab	49 8b d0	 mov	 rdx, r8
  006ae	41 b8 04 00 00
	00		 mov	 r8d, 4
  006b4	4d 6b c0 01	 imul	 r8, r8, 1
  006b8	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  006bd	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  006c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  006c7	b8 10 00 00 00	 mov	 eax, 16
  006cc	48 6b c0 01	 imul	 rax, rax, 1
  006d0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  006d5	48 03 c8	 add	 rcx, rax
  006d8	48 8b c1	 mov	 rax, rcx
  006db	b9 04 00 00 00	 mov	 ecx, 4
  006e0	48 6b c9 02	 imul	 rcx, rcx, 2
  006e4	ba 10 00 00 00	 mov	 edx, 16
  006e9	48 6b d2 02	 imul	 rdx, rdx, 2
  006ed	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  006f5	4c 03 c2	 add	 r8, rdx
  006f8	49 8b d0	 mov	 rdx, r8
  006fb	41 b8 04 00 00
	00		 mov	 r8d, 4
  00701	4d 6b c0 01	 imul	 r8, r8, 1
  00705	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0070a	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00710	f3 0f 58 c1	 addss	 xmm0, xmm1
  00714	b8 10 00 00 00	 mov	 eax, 16
  00719	48 6b c0 01	 imul	 rax, rax, 1
  0071d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00722	48 03 c8	 add	 rcx, rax
  00725	48 8b c1	 mov	 rax, rcx
  00728	b9 04 00 00 00	 mov	 ecx, 4
  0072d	48 6b c9 03	 imul	 rcx, rcx, 3
  00731	ba 10 00 00 00	 mov	 edx, 16
  00736	48 6b d2 03	 imul	 rdx, rdx, 3
  0073a	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00742	4c 03 c2	 add	 r8, rdx
  00745	49 8b d0	 mov	 rdx, r8
  00748	41 b8 04 00 00
	00		 mov	 r8d, 4
  0074e	4d 6b c0 01	 imul	 r8, r8, 1
  00752	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00757	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0075d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00761	f3 0f 11 44 24
	14		 movss	 DWORD PTR Result$[rsp+20], xmm0
  00767	b8 10 00 00 00	 mov	 eax, 16
  0076c	48 6b c0 01	 imul	 rax, rax, 1
  00770	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00775	48 03 c8	 add	 rcx, rax
  00778	48 8b c1	 mov	 rax, rcx
  0077b	b9 04 00 00 00	 mov	 ecx, 4
  00780	48 6b c9 00	 imul	 rcx, rcx, 0
  00784	ba 10 00 00 00	 mov	 edx, 16
  00789	48 6b d2 00	 imul	 rdx, rdx, 0
  0078d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00795	4c 03 c2	 add	 r8, rdx
  00798	49 8b d0	 mov	 rdx, r8
  0079b	41 b8 04 00 00
	00		 mov	 r8d, 4
  007a1	4d 6b c0 02	 imul	 r8, r8, 2
  007a5	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  007aa	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  007b0	b8 10 00 00 00	 mov	 eax, 16
  007b5	48 6b c0 01	 imul	 rax, rax, 1
  007b9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  007be	48 03 c8	 add	 rcx, rax
  007c1	48 8b c1	 mov	 rax, rcx
  007c4	b9 04 00 00 00	 mov	 ecx, 4
  007c9	48 6b c9 01	 imul	 rcx, rcx, 1
  007cd	ba 10 00 00 00	 mov	 edx, 16
  007d2	48 6b d2 01	 imul	 rdx, rdx, 1
  007d6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  007de	4c 03 c2	 add	 r8, rdx
  007e1	49 8b d0	 mov	 rdx, r8
  007e4	41 b8 04 00 00
	00		 mov	 r8d, 4
  007ea	4d 6b c0 02	 imul	 r8, r8, 2
  007ee	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  007f3	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  007f9	f3 0f 58 c1	 addss	 xmm0, xmm1
  007fd	b8 10 00 00 00	 mov	 eax, 16
  00802	48 6b c0 01	 imul	 rax, rax, 1
  00806	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0080b	48 03 c8	 add	 rcx, rax
  0080e	48 8b c1	 mov	 rax, rcx
  00811	b9 04 00 00 00	 mov	 ecx, 4
  00816	48 6b c9 02	 imul	 rcx, rcx, 2
  0081a	ba 10 00 00 00	 mov	 edx, 16
  0081f	48 6b d2 02	 imul	 rdx, rdx, 2
  00823	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0082b	4c 03 c2	 add	 r8, rdx
  0082e	49 8b d0	 mov	 rdx, r8
  00831	41 b8 04 00 00
	00		 mov	 r8d, 4
  00837	4d 6b c0 02	 imul	 r8, r8, 2
  0083b	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00840	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00846	f3 0f 58 c1	 addss	 xmm0, xmm1
  0084a	b8 10 00 00 00	 mov	 eax, 16
  0084f	48 6b c0 01	 imul	 rax, rax, 1
  00853	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00858	48 03 c8	 add	 rcx, rax
  0085b	48 8b c1	 mov	 rax, rcx
  0085e	b9 04 00 00 00	 mov	 ecx, 4
  00863	48 6b c9 03	 imul	 rcx, rcx, 3
  00867	ba 10 00 00 00	 mov	 edx, 16
  0086c	48 6b d2 03	 imul	 rdx, rdx, 3
  00870	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00878	4c 03 c2	 add	 r8, rdx
  0087b	49 8b d0	 mov	 rdx, r8
  0087e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00884	4d 6b c0 02	 imul	 r8, r8, 2
  00888	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0088d	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00893	f3 0f 58 c1	 addss	 xmm0, xmm1
  00897	f3 0f 11 44 24
	18		 movss	 DWORD PTR Result$[rsp+24], xmm0
  0089d	b8 10 00 00 00	 mov	 eax, 16
  008a2	48 6b c0 01	 imul	 rax, rax, 1
  008a6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  008ab	48 03 c8	 add	 rcx, rax
  008ae	48 8b c1	 mov	 rax, rcx
  008b1	b9 04 00 00 00	 mov	 ecx, 4
  008b6	48 6b c9 00	 imul	 rcx, rcx, 0
  008ba	ba 10 00 00 00	 mov	 edx, 16
  008bf	48 6b d2 00	 imul	 rdx, rdx, 0
  008c3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  008cb	4c 03 c2	 add	 r8, rdx
  008ce	49 8b d0	 mov	 rdx, r8
  008d1	41 b8 04 00 00
	00		 mov	 r8d, 4
  008d7	4d 6b c0 03	 imul	 r8, r8, 3
  008db	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  008e0	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  008e6	b8 10 00 00 00	 mov	 eax, 16
  008eb	48 6b c0 01	 imul	 rax, rax, 1
  008ef	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  008f4	48 03 c8	 add	 rcx, rax
  008f7	48 8b c1	 mov	 rax, rcx
  008fa	b9 04 00 00 00	 mov	 ecx, 4
  008ff	48 6b c9 01	 imul	 rcx, rcx, 1
  00903	ba 10 00 00 00	 mov	 edx, 16
  00908	48 6b d2 01	 imul	 rdx, rdx, 1
  0090c	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00914	4c 03 c2	 add	 r8, rdx
  00917	49 8b d0	 mov	 rdx, r8
  0091a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00920	4d 6b c0 03	 imul	 r8, r8, 3
  00924	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00929	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0092f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00933	b8 10 00 00 00	 mov	 eax, 16
  00938	48 6b c0 01	 imul	 rax, rax, 1
  0093c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00941	48 03 c8	 add	 rcx, rax
  00944	48 8b c1	 mov	 rax, rcx
  00947	b9 04 00 00 00	 mov	 ecx, 4
  0094c	48 6b c9 02	 imul	 rcx, rcx, 2
  00950	ba 10 00 00 00	 mov	 edx, 16
  00955	48 6b d2 02	 imul	 rdx, rdx, 2
  00959	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00961	4c 03 c2	 add	 r8, rdx
  00964	49 8b d0	 mov	 rdx, r8
  00967	41 b8 04 00 00
	00		 mov	 r8d, 4
  0096d	4d 6b c0 03	 imul	 r8, r8, 3
  00971	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00976	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0097c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00980	b8 10 00 00 00	 mov	 eax, 16
  00985	48 6b c0 01	 imul	 rax, rax, 1
  00989	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0098e	48 03 c8	 add	 rcx, rax
  00991	48 8b c1	 mov	 rax, rcx
  00994	b9 04 00 00 00	 mov	 ecx, 4
  00999	48 6b c9 03	 imul	 rcx, rcx, 3
  0099d	ba 10 00 00 00	 mov	 edx, 16
  009a2	48 6b d2 03	 imul	 rdx, rdx, 3
  009a6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  009ae	4c 03 c2	 add	 r8, rdx
  009b1	49 8b d0	 mov	 rdx, r8
  009b4	41 b8 04 00 00
	00		 mov	 r8d, 4
  009ba	4d 6b c0 03	 imul	 r8, r8, 3
  009be	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  009c3	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  009c9	f3 0f 58 c1	 addss	 xmm0, xmm1
  009cd	f3 0f 11 44 24
	1c		 movss	 DWORD PTR Result$[rsp+28], xmm0
  009d3	b8 10 00 00 00	 mov	 eax, 16
  009d8	48 6b c0 02	 imul	 rax, rax, 2
  009dc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  009e1	48 03 c8	 add	 rcx, rax
  009e4	48 8b c1	 mov	 rax, rcx
  009e7	b9 04 00 00 00	 mov	 ecx, 4
  009ec	48 6b c9 00	 imul	 rcx, rcx, 0
  009f0	ba 10 00 00 00	 mov	 edx, 16
  009f5	48 6b d2 00	 imul	 rdx, rdx, 0
  009f9	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00a01	4c 03 c2	 add	 r8, rdx
  00a04	49 8b d0	 mov	 rdx, r8
  00a07	41 b8 04 00 00
	00		 mov	 r8d, 4
  00a0d	4d 6b c0 00	 imul	 r8, r8, 0
  00a11	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00a16	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  00a1c	b8 10 00 00 00	 mov	 eax, 16
  00a21	48 6b c0 02	 imul	 rax, rax, 2
  00a25	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00a2a	48 03 c8	 add	 rcx, rax
  00a2d	48 8b c1	 mov	 rax, rcx
  00a30	b9 04 00 00 00	 mov	 ecx, 4
  00a35	48 6b c9 01	 imul	 rcx, rcx, 1
  00a39	ba 10 00 00 00	 mov	 edx, 16
  00a3e	48 6b d2 01	 imul	 rdx, rdx, 1
  00a42	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00a4a	4c 03 c2	 add	 r8, rdx
  00a4d	49 8b d0	 mov	 rdx, r8
  00a50	41 b8 04 00 00
	00		 mov	 r8d, 4
  00a56	4d 6b c0 00	 imul	 r8, r8, 0
  00a5a	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00a5f	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00a65	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a69	b8 10 00 00 00	 mov	 eax, 16
  00a6e	48 6b c0 02	 imul	 rax, rax, 2
  00a72	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00a77	48 03 c8	 add	 rcx, rax
  00a7a	48 8b c1	 mov	 rax, rcx
  00a7d	b9 04 00 00 00	 mov	 ecx, 4
  00a82	48 6b c9 02	 imul	 rcx, rcx, 2
  00a86	ba 10 00 00 00	 mov	 edx, 16
  00a8b	48 6b d2 02	 imul	 rdx, rdx, 2
  00a8f	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00a97	4c 03 c2	 add	 r8, rdx
  00a9a	49 8b d0	 mov	 rdx, r8
  00a9d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00aa3	4d 6b c0 00	 imul	 r8, r8, 0
  00aa7	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00aac	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00ab2	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ab6	b8 10 00 00 00	 mov	 eax, 16
  00abb	48 6b c0 02	 imul	 rax, rax, 2
  00abf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00ac4	48 03 c8	 add	 rcx, rax
  00ac7	48 8b c1	 mov	 rax, rcx
  00aca	b9 04 00 00 00	 mov	 ecx, 4
  00acf	48 6b c9 03	 imul	 rcx, rcx, 3
  00ad3	ba 10 00 00 00	 mov	 edx, 16
  00ad8	48 6b d2 03	 imul	 rdx, rdx, 3
  00adc	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00ae4	4c 03 c2	 add	 r8, rdx
  00ae7	49 8b d0	 mov	 rdx, r8
  00aea	41 b8 04 00 00
	00		 mov	 r8d, 4
  00af0	4d 6b c0 00	 imul	 r8, r8, 0
  00af4	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00af9	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00aff	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b03	f3 0f 11 44 24
	20		 movss	 DWORD PTR Result$[rsp+32], xmm0
  00b09	b8 10 00 00 00	 mov	 eax, 16
  00b0e	48 6b c0 02	 imul	 rax, rax, 2
  00b12	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00b17	48 03 c8	 add	 rcx, rax
  00b1a	48 8b c1	 mov	 rax, rcx
  00b1d	b9 04 00 00 00	 mov	 ecx, 4
  00b22	48 6b c9 00	 imul	 rcx, rcx, 0
  00b26	ba 10 00 00 00	 mov	 edx, 16
  00b2b	48 6b d2 00	 imul	 rdx, rdx, 0
  00b2f	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00b37	4c 03 c2	 add	 r8, rdx
  00b3a	49 8b d0	 mov	 rdx, r8
  00b3d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00b43	4d 6b c0 01	 imul	 r8, r8, 1
  00b47	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00b4c	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  00b52	b8 10 00 00 00	 mov	 eax, 16
  00b57	48 6b c0 02	 imul	 rax, rax, 2
  00b5b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00b60	48 03 c8	 add	 rcx, rax
  00b63	48 8b c1	 mov	 rax, rcx
  00b66	b9 04 00 00 00	 mov	 ecx, 4
  00b6b	48 6b c9 01	 imul	 rcx, rcx, 1
  00b6f	ba 10 00 00 00	 mov	 edx, 16
  00b74	48 6b d2 01	 imul	 rdx, rdx, 1
  00b78	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00b80	4c 03 c2	 add	 r8, rdx
  00b83	49 8b d0	 mov	 rdx, r8
  00b86	41 b8 04 00 00
	00		 mov	 r8d, 4
  00b8c	4d 6b c0 01	 imul	 r8, r8, 1
  00b90	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00b95	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00b9b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b9f	b8 10 00 00 00	 mov	 eax, 16
  00ba4	48 6b c0 02	 imul	 rax, rax, 2
  00ba8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00bad	48 03 c8	 add	 rcx, rax
  00bb0	48 8b c1	 mov	 rax, rcx
  00bb3	b9 04 00 00 00	 mov	 ecx, 4
  00bb8	48 6b c9 02	 imul	 rcx, rcx, 2
  00bbc	ba 10 00 00 00	 mov	 edx, 16
  00bc1	48 6b d2 02	 imul	 rdx, rdx, 2
  00bc5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00bcd	4c 03 c2	 add	 r8, rdx
  00bd0	49 8b d0	 mov	 rdx, r8
  00bd3	41 b8 04 00 00
	00		 mov	 r8d, 4
  00bd9	4d 6b c0 01	 imul	 r8, r8, 1
  00bdd	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00be2	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00be8	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bec	b8 10 00 00 00	 mov	 eax, 16
  00bf1	48 6b c0 02	 imul	 rax, rax, 2
  00bf5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00bfa	48 03 c8	 add	 rcx, rax
  00bfd	48 8b c1	 mov	 rax, rcx
  00c00	b9 04 00 00 00	 mov	 ecx, 4
  00c05	48 6b c9 03	 imul	 rcx, rcx, 3
  00c09	ba 10 00 00 00	 mov	 edx, 16
  00c0e	48 6b d2 03	 imul	 rdx, rdx, 3
  00c12	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00c1a	4c 03 c2	 add	 r8, rdx
  00c1d	49 8b d0	 mov	 rdx, r8
  00c20	41 b8 04 00 00
	00		 mov	 r8d, 4
  00c26	4d 6b c0 01	 imul	 r8, r8, 1
  00c2a	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00c2f	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00c35	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c39	f3 0f 11 44 24
	24		 movss	 DWORD PTR Result$[rsp+36], xmm0
  00c3f	b8 10 00 00 00	 mov	 eax, 16
  00c44	48 6b c0 02	 imul	 rax, rax, 2
  00c48	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00c4d	48 03 c8	 add	 rcx, rax
  00c50	48 8b c1	 mov	 rax, rcx
  00c53	b9 04 00 00 00	 mov	 ecx, 4
  00c58	48 6b c9 00	 imul	 rcx, rcx, 0
  00c5c	ba 10 00 00 00	 mov	 edx, 16
  00c61	48 6b d2 00	 imul	 rdx, rdx, 0
  00c65	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00c6d	4c 03 c2	 add	 r8, rdx
  00c70	49 8b d0	 mov	 rdx, r8
  00c73	41 b8 04 00 00
	00		 mov	 r8d, 4
  00c79	4d 6b c0 02	 imul	 r8, r8, 2
  00c7d	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00c82	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  00c88	b8 10 00 00 00	 mov	 eax, 16
  00c8d	48 6b c0 02	 imul	 rax, rax, 2
  00c91	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00c96	48 03 c8	 add	 rcx, rax
  00c99	48 8b c1	 mov	 rax, rcx
  00c9c	b9 04 00 00 00	 mov	 ecx, 4
  00ca1	48 6b c9 01	 imul	 rcx, rcx, 1
  00ca5	ba 10 00 00 00	 mov	 edx, 16
  00caa	48 6b d2 01	 imul	 rdx, rdx, 1
  00cae	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00cb6	4c 03 c2	 add	 r8, rdx
  00cb9	49 8b d0	 mov	 rdx, r8
  00cbc	41 b8 04 00 00
	00		 mov	 r8d, 4
  00cc2	4d 6b c0 02	 imul	 r8, r8, 2
  00cc6	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00ccb	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00cd1	f3 0f 58 c1	 addss	 xmm0, xmm1
  00cd5	b8 10 00 00 00	 mov	 eax, 16
  00cda	48 6b c0 02	 imul	 rax, rax, 2
  00cde	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00ce3	48 03 c8	 add	 rcx, rax
  00ce6	48 8b c1	 mov	 rax, rcx
  00ce9	b9 04 00 00 00	 mov	 ecx, 4
  00cee	48 6b c9 02	 imul	 rcx, rcx, 2
  00cf2	ba 10 00 00 00	 mov	 edx, 16
  00cf7	48 6b d2 02	 imul	 rdx, rdx, 2
  00cfb	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00d03	4c 03 c2	 add	 r8, rdx
  00d06	49 8b d0	 mov	 rdx, r8
  00d09	41 b8 04 00 00
	00		 mov	 r8d, 4
  00d0f	4d 6b c0 02	 imul	 r8, r8, 2
  00d13	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00d18	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00d1e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00d22	b8 10 00 00 00	 mov	 eax, 16
  00d27	48 6b c0 02	 imul	 rax, rax, 2
  00d2b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00d30	48 03 c8	 add	 rcx, rax
  00d33	48 8b c1	 mov	 rax, rcx
  00d36	b9 04 00 00 00	 mov	 ecx, 4
  00d3b	48 6b c9 03	 imul	 rcx, rcx, 3
  00d3f	ba 10 00 00 00	 mov	 edx, 16
  00d44	48 6b d2 03	 imul	 rdx, rdx, 3
  00d48	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00d50	4c 03 c2	 add	 r8, rdx
  00d53	49 8b d0	 mov	 rdx, r8
  00d56	41 b8 04 00 00
	00		 mov	 r8d, 4
  00d5c	4d 6b c0 02	 imul	 r8, r8, 2
  00d60	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00d65	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00d6b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00d6f	f3 0f 11 44 24
	28		 movss	 DWORD PTR Result$[rsp+40], xmm0
  00d75	b8 10 00 00 00	 mov	 eax, 16
  00d7a	48 6b c0 02	 imul	 rax, rax, 2
  00d7e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00d83	48 03 c8	 add	 rcx, rax
  00d86	48 8b c1	 mov	 rax, rcx
  00d89	b9 04 00 00 00	 mov	 ecx, 4
  00d8e	48 6b c9 00	 imul	 rcx, rcx, 0
  00d92	ba 10 00 00 00	 mov	 edx, 16
  00d97	48 6b d2 00	 imul	 rdx, rdx, 0
  00d9b	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00da3	4c 03 c2	 add	 r8, rdx
  00da6	49 8b d0	 mov	 rdx, r8
  00da9	41 b8 04 00 00
	00		 mov	 r8d, 4
  00daf	4d 6b c0 03	 imul	 r8, r8, 3
  00db3	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00db8	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  00dbe	b8 10 00 00 00	 mov	 eax, 16
  00dc3	48 6b c0 02	 imul	 rax, rax, 2
  00dc7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00dcc	48 03 c8	 add	 rcx, rax
  00dcf	48 8b c1	 mov	 rax, rcx
  00dd2	b9 04 00 00 00	 mov	 ecx, 4
  00dd7	48 6b c9 01	 imul	 rcx, rcx, 1
  00ddb	ba 10 00 00 00	 mov	 edx, 16
  00de0	48 6b d2 01	 imul	 rdx, rdx, 1
  00de4	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00dec	4c 03 c2	 add	 r8, rdx
  00def	49 8b d0	 mov	 rdx, r8
  00df2	41 b8 04 00 00
	00		 mov	 r8d, 4
  00df8	4d 6b c0 03	 imul	 r8, r8, 3
  00dfc	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00e01	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00e07	f3 0f 58 c1	 addss	 xmm0, xmm1
  00e0b	b8 10 00 00 00	 mov	 eax, 16
  00e10	48 6b c0 02	 imul	 rax, rax, 2
  00e14	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00e19	48 03 c8	 add	 rcx, rax
  00e1c	48 8b c1	 mov	 rax, rcx
  00e1f	b9 04 00 00 00	 mov	 ecx, 4
  00e24	48 6b c9 02	 imul	 rcx, rcx, 2
  00e28	ba 10 00 00 00	 mov	 edx, 16
  00e2d	48 6b d2 02	 imul	 rdx, rdx, 2
  00e31	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00e39	4c 03 c2	 add	 r8, rdx
  00e3c	49 8b d0	 mov	 rdx, r8
  00e3f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00e45	4d 6b c0 03	 imul	 r8, r8, 3
  00e49	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00e4e	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00e54	f3 0f 58 c1	 addss	 xmm0, xmm1
  00e58	b8 10 00 00 00	 mov	 eax, 16
  00e5d	48 6b c0 02	 imul	 rax, rax, 2
  00e61	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00e66	48 03 c8	 add	 rcx, rax
  00e69	48 8b c1	 mov	 rax, rcx
  00e6c	b9 04 00 00 00	 mov	 ecx, 4
  00e71	48 6b c9 03	 imul	 rcx, rcx, 3
  00e75	ba 10 00 00 00	 mov	 edx, 16
  00e7a	48 6b d2 03	 imul	 rdx, rdx, 3
  00e7e	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00e86	4c 03 c2	 add	 r8, rdx
  00e89	49 8b d0	 mov	 rdx, r8
  00e8c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00e92	4d 6b c0 03	 imul	 r8, r8, 3
  00e96	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00e9b	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00ea1	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ea5	f3 0f 11 44 24
	2c		 movss	 DWORD PTR Result$[rsp+44], xmm0
  00eab	b8 10 00 00 00	 mov	 eax, 16
  00eb0	48 6b c0 03	 imul	 rax, rax, 3
  00eb4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00eb9	48 03 c8	 add	 rcx, rax
  00ebc	48 8b c1	 mov	 rax, rcx
  00ebf	b9 04 00 00 00	 mov	 ecx, 4
  00ec4	48 6b c9 00	 imul	 rcx, rcx, 0
  00ec8	ba 10 00 00 00	 mov	 edx, 16
  00ecd	48 6b d2 00	 imul	 rdx, rdx, 0
  00ed1	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00ed9	4c 03 c2	 add	 r8, rdx
  00edc	49 8b d0	 mov	 rdx, r8
  00edf	41 b8 04 00 00
	00		 mov	 r8d, 4
  00ee5	4d 6b c0 00	 imul	 r8, r8, 0
  00ee9	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  00eee	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  00ef4	b8 10 00 00 00	 mov	 eax, 16
  00ef9	48 6b c0 03	 imul	 rax, rax, 3
  00efd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00f02	48 03 c8	 add	 rcx, rax
  00f05	48 8b c1	 mov	 rax, rcx
  00f08	b9 04 00 00 00	 mov	 ecx, 4
  00f0d	48 6b c9 01	 imul	 rcx, rcx, 1
  00f11	ba 10 00 00 00	 mov	 edx, 16
  00f16	48 6b d2 01	 imul	 rdx, rdx, 1
  00f1a	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00f22	4c 03 c2	 add	 r8, rdx
  00f25	49 8b d0	 mov	 rdx, r8
  00f28	41 b8 04 00 00
	00		 mov	 r8d, 4
  00f2e	4d 6b c0 00	 imul	 r8, r8, 0
  00f32	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00f37	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00f3d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f41	b8 10 00 00 00	 mov	 eax, 16
  00f46	48 6b c0 03	 imul	 rax, rax, 3
  00f4a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00f4f	48 03 c8	 add	 rcx, rax
  00f52	48 8b c1	 mov	 rax, rcx
  00f55	b9 04 00 00 00	 mov	 ecx, 4
  00f5a	48 6b c9 02	 imul	 rcx, rcx, 2
  00f5e	ba 10 00 00 00	 mov	 edx, 16
  00f63	48 6b d2 02	 imul	 rdx, rdx, 2
  00f67	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00f6f	4c 03 c2	 add	 r8, rdx
  00f72	49 8b d0	 mov	 rdx, r8
  00f75	41 b8 04 00 00
	00		 mov	 r8d, 4
  00f7b	4d 6b c0 00	 imul	 r8, r8, 0
  00f7f	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00f84	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00f8a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f8e	b8 10 00 00 00	 mov	 eax, 16
  00f93	48 6b c0 03	 imul	 rax, rax, 3
  00f97	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00f9c	48 03 c8	 add	 rcx, rax
  00f9f	48 8b c1	 mov	 rax, rcx
  00fa2	b9 04 00 00 00	 mov	 ecx, 4
  00fa7	48 6b c9 03	 imul	 rcx, rcx, 3
  00fab	ba 10 00 00 00	 mov	 edx, 16
  00fb0	48 6b d2 03	 imul	 rdx, rdx, 3
  00fb4	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  00fbc	4c 03 c2	 add	 r8, rdx
  00fbf	49 8b d0	 mov	 rdx, r8
  00fc2	41 b8 04 00 00
	00		 mov	 r8d, 4
  00fc8	4d 6b c0 00	 imul	 r8, r8, 0
  00fcc	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  00fd1	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  00fd7	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fdb	f3 0f 11 44 24
	30		 movss	 DWORD PTR Result$[rsp+48], xmm0
  00fe1	b8 10 00 00 00	 mov	 eax, 16
  00fe6	48 6b c0 03	 imul	 rax, rax, 3
  00fea	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  00fef	48 03 c8	 add	 rcx, rax
  00ff2	48 8b c1	 mov	 rax, rcx
  00ff5	b9 04 00 00 00	 mov	 ecx, 4
  00ffa	48 6b c9 00	 imul	 rcx, rcx, 0
  00ffe	ba 10 00 00 00	 mov	 edx, 16
  01003	48 6b d2 00	 imul	 rdx, rdx, 0
  01007	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0100f	4c 03 c2	 add	 r8, rdx
  01012	49 8b d0	 mov	 rdx, r8
  01015	41 b8 04 00 00
	00		 mov	 r8d, 4
  0101b	4d 6b c0 01	 imul	 r8, r8, 1
  0101f	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  01024	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  0102a	b8 10 00 00 00	 mov	 eax, 16
  0102f	48 6b c0 03	 imul	 rax, rax, 3
  01033	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  01038	48 03 c8	 add	 rcx, rax
  0103b	48 8b c1	 mov	 rax, rcx
  0103e	b9 04 00 00 00	 mov	 ecx, 4
  01043	48 6b c9 01	 imul	 rcx, rcx, 1
  01047	ba 10 00 00 00	 mov	 edx, 16
  0104c	48 6b d2 01	 imul	 rdx, rdx, 1
  01050	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  01058	4c 03 c2	 add	 r8, rdx
  0105b	49 8b d0	 mov	 rdx, r8
  0105e	41 b8 04 00 00
	00		 mov	 r8d, 4
  01064	4d 6b c0 01	 imul	 r8, r8, 1
  01068	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0106d	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  01073	f3 0f 58 c1	 addss	 xmm0, xmm1
  01077	b8 10 00 00 00	 mov	 eax, 16
  0107c	48 6b c0 03	 imul	 rax, rax, 3
  01080	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  01085	48 03 c8	 add	 rcx, rax
  01088	48 8b c1	 mov	 rax, rcx
  0108b	b9 04 00 00 00	 mov	 ecx, 4
  01090	48 6b c9 02	 imul	 rcx, rcx, 2
  01094	ba 10 00 00 00	 mov	 edx, 16
  01099	48 6b d2 02	 imul	 rdx, rdx, 2
  0109d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  010a5	4c 03 c2	 add	 r8, rdx
  010a8	49 8b d0	 mov	 rdx, r8
  010ab	41 b8 04 00 00
	00		 mov	 r8d, 4
  010b1	4d 6b c0 01	 imul	 r8, r8, 1
  010b5	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  010ba	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  010c0	f3 0f 58 c1	 addss	 xmm0, xmm1
  010c4	b8 10 00 00 00	 mov	 eax, 16
  010c9	48 6b c0 03	 imul	 rax, rax, 3
  010cd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  010d2	48 03 c8	 add	 rcx, rax
  010d5	48 8b c1	 mov	 rax, rcx
  010d8	b9 04 00 00 00	 mov	 ecx, 4
  010dd	48 6b c9 03	 imul	 rcx, rcx, 3
  010e1	ba 10 00 00 00	 mov	 edx, 16
  010e6	48 6b d2 03	 imul	 rdx, rdx, 3
  010ea	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  010f2	4c 03 c2	 add	 r8, rdx
  010f5	49 8b d0	 mov	 rdx, r8
  010f8	41 b8 04 00 00
	00		 mov	 r8d, 4
  010fe	4d 6b c0 01	 imul	 r8, r8, 1
  01102	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  01107	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0110d	f3 0f 58 c1	 addss	 xmm0, xmm1
  01111	f3 0f 11 44 24
	34		 movss	 DWORD PTR Result$[rsp+52], xmm0
  01117	b8 10 00 00 00	 mov	 eax, 16
  0111c	48 6b c0 03	 imul	 rax, rax, 3
  01120	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  01125	48 03 c8	 add	 rcx, rax
  01128	48 8b c1	 mov	 rax, rcx
  0112b	b9 04 00 00 00	 mov	 ecx, 4
  01130	48 6b c9 00	 imul	 rcx, rcx, 0
  01134	ba 10 00 00 00	 mov	 edx, 16
  01139	48 6b d2 00	 imul	 rdx, rdx, 0
  0113d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  01145	4c 03 c2	 add	 r8, rdx
  01148	49 8b d0	 mov	 rdx, r8
  0114b	41 b8 04 00 00
	00		 mov	 r8d, 4
  01151	4d 6b c0 02	 imul	 r8, r8, 2
  01155	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  0115a	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  01160	b8 10 00 00 00	 mov	 eax, 16
  01165	48 6b c0 03	 imul	 rax, rax, 3
  01169	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0116e	48 03 c8	 add	 rcx, rax
  01171	48 8b c1	 mov	 rax, rcx
  01174	b9 04 00 00 00	 mov	 ecx, 4
  01179	48 6b c9 01	 imul	 rcx, rcx, 1
  0117d	ba 10 00 00 00	 mov	 edx, 16
  01182	48 6b d2 01	 imul	 rdx, rdx, 1
  01186	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0118e	4c 03 c2	 add	 r8, rdx
  01191	49 8b d0	 mov	 rdx, r8
  01194	41 b8 04 00 00
	00		 mov	 r8d, 4
  0119a	4d 6b c0 02	 imul	 r8, r8, 2
  0119e	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  011a3	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  011a9	f3 0f 58 c1	 addss	 xmm0, xmm1
  011ad	b8 10 00 00 00	 mov	 eax, 16
  011b2	48 6b c0 03	 imul	 rax, rax, 3
  011b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  011bb	48 03 c8	 add	 rcx, rax
  011be	48 8b c1	 mov	 rax, rcx
  011c1	b9 04 00 00 00	 mov	 ecx, 4
  011c6	48 6b c9 02	 imul	 rcx, rcx, 2
  011ca	ba 10 00 00 00	 mov	 edx, 16
  011cf	48 6b d2 02	 imul	 rdx, rdx, 2
  011d3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  011db	4c 03 c2	 add	 r8, rdx
  011de	49 8b d0	 mov	 rdx, r8
  011e1	41 b8 04 00 00
	00		 mov	 r8d, 4
  011e7	4d 6b c0 02	 imul	 r8, r8, 2
  011eb	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  011f0	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  011f6	f3 0f 58 c1	 addss	 xmm0, xmm1
  011fa	b8 10 00 00 00	 mov	 eax, 16
  011ff	48 6b c0 03	 imul	 rax, rax, 3
  01203	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  01208	48 03 c8	 add	 rcx, rax
  0120b	48 8b c1	 mov	 rax, rcx
  0120e	b9 04 00 00 00	 mov	 ecx, 4
  01213	48 6b c9 03	 imul	 rcx, rcx, 3
  01217	ba 10 00 00 00	 mov	 edx, 16
  0121c	48 6b d2 03	 imul	 rdx, rdx, 3
  01220	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  01228	4c 03 c2	 add	 r8, rdx
  0122b	49 8b d0	 mov	 rdx, r8
  0122e	41 b8 04 00 00
	00		 mov	 r8d, 4
  01234	4d 6b c0 02	 imul	 r8, r8, 2
  01238	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  0123d	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  01243	f3 0f 58 c1	 addss	 xmm0, xmm1
  01247	f3 0f 11 44 24
	38		 movss	 DWORD PTR Result$[rsp+56], xmm0
  0124d	b8 10 00 00 00	 mov	 eax, 16
  01252	48 6b c0 03	 imul	 rax, rax, 3
  01256	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0125b	48 03 c8	 add	 rcx, rax
  0125e	48 8b c1	 mov	 rax, rcx
  01261	b9 04 00 00 00	 mov	 ecx, 4
  01266	48 6b c9 00	 imul	 rcx, rcx, 0
  0126a	ba 10 00 00 00	 mov	 edx, 16
  0126f	48 6b d2 00	 imul	 rdx, rdx, 0
  01273	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0127b	4c 03 c2	 add	 r8, rdx
  0127e	49 8b d0	 mov	 rdx, r8
  01281	41 b8 04 00 00
	00		 mov	 r8d, 4
  01287	4d 6b c0 03	 imul	 r8, r8, 3
  0128b	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [rax+rcx]
  01290	f3 42 0f 59 04
	02		 mulss	 xmm0, DWORD PTR [rdx+r8]
  01296	b8 10 00 00 00	 mov	 eax, 16
  0129b	48 6b c0 03	 imul	 rax, rax, 3
  0129f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  012a4	48 03 c8	 add	 rcx, rax
  012a7	48 8b c1	 mov	 rax, rcx
  012aa	b9 04 00 00 00	 mov	 ecx, 4
  012af	48 6b c9 01	 imul	 rcx, rcx, 1
  012b3	ba 10 00 00 00	 mov	 edx, 16
  012b8	48 6b d2 01	 imul	 rdx, rdx, 1
  012bc	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  012c4	4c 03 c2	 add	 r8, rdx
  012c7	49 8b d0	 mov	 rdx, r8
  012ca	41 b8 04 00 00
	00		 mov	 r8d, 4
  012d0	4d 6b c0 03	 imul	 r8, r8, 3
  012d4	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  012d9	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  012df	f3 0f 58 c1	 addss	 xmm0, xmm1
  012e3	b8 10 00 00 00	 mov	 eax, 16
  012e8	48 6b c0 03	 imul	 rax, rax, 3
  012ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  012f1	48 03 c8	 add	 rcx, rax
  012f4	48 8b c1	 mov	 rax, rcx
  012f7	b9 04 00 00 00	 mov	 ecx, 4
  012fc	48 6b c9 02	 imul	 rcx, rcx, 2
  01300	ba 10 00 00 00	 mov	 edx, 16
  01305	48 6b d2 02	 imul	 rdx, rdx, 2
  01309	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  01311	4c 03 c2	 add	 r8, rdx
  01314	49 8b d0	 mov	 rdx, r8
  01317	41 b8 04 00 00
	00		 mov	 r8d, 4
  0131d	4d 6b c0 03	 imul	 r8, r8, 3
  01321	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  01326	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  0132c	f3 0f 58 c1	 addss	 xmm0, xmm1
  01330	b8 10 00 00 00	 mov	 eax, 16
  01335	48 6b c0 03	 imul	 rax, rax, 3
  01339	48 8b 4c 24 78	 mov	 rcx, QWORD PTR A$[rsp]
  0133e	48 03 c8	 add	 rcx, rax
  01341	48 8b c1	 mov	 rax, rcx
  01344	b9 04 00 00 00	 mov	 ecx, 4
  01349	48 6b c9 03	 imul	 rcx, rcx, 3
  0134d	ba 10 00 00 00	 mov	 edx, 16
  01352	48 6b d2 03	 imul	 rdx, rdx, 3
  01356	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR B$[rsp]
  0135e	4c 03 c2	 add	 r8, rdx
  01361	49 8b d0	 mov	 rdx, r8
  01364	41 b8 04 00 00
	00		 mov	 r8d, 4
  0136a	4d 6b c0 03	 imul	 r8, r8, 3
  0136e	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [rax+rcx]
  01373	f3 42 0f 59 0c
	02		 mulss	 xmm1, DWORD PTR [rdx+r8]
  01379	f3 0f 58 c1	 addss	 xmm0, xmm1
  0137d	f3 0f 11 44 24
	3c		 movss	 DWORD PTR Result$[rsp+60], xmm0

; 163  :     {
; 164  :         A.m[0][0] * B.m[0][0] + A.m[0][1] * B.m[1][0] + A.m[0][2] * B.m[2][0] + A.m[0][3] * B.m[3][0],
; 165  :         A.m[0][0] * B.m[0][1] + A.m[0][1] * B.m[1][1] + A.m[0][2] * B.m[2][1] + A.m[0][3] * B.m[3][1],
; 166  :         A.m[0][0] * B.m[0][2] + A.m[0][1] * B.m[1][2] + A.m[0][2] * B.m[2][2] + A.m[0][3] * B.m[3][2],
; 167  :         A.m[0][0] * B.m[0][3] + A.m[0][1] * B.m[1][3] + A.m[0][2] * B.m[2][3] + A.m[0][3] * B.m[3][3],
; 168  :         A.m[1][0] * B.m[0][0] + A.m[1][1] * B.m[1][0] + A.m[1][2] * B.m[2][0] + A.m[1][3] * B.m[3][0],
; 169  :         A.m[1][0] * B.m[0][1] + A.m[1][1] * B.m[1][1] + A.m[1][2] * B.m[2][1] + A.m[1][3] * B.m[3][1],
; 170  :         A.m[1][0] * B.m[0][2] + A.m[1][1] * B.m[1][2] + A.m[1][2] * B.m[2][2] + A.m[1][3] * B.m[3][2],
; 171  :         A.m[1][0] * B.m[0][3] + A.m[1][1] * B.m[1][3] + A.m[1][2] * B.m[2][3] + A.m[1][3] * B.m[3][3],
; 172  :         A.m[2][0] * B.m[0][0] + A.m[2][1] * B.m[1][0] + A.m[2][2] * B.m[2][0] + A.m[2][3] * B.m[3][0],
; 173  :         A.m[2][0] * B.m[0][1] + A.m[2][1] * B.m[1][1] + A.m[2][2] * B.m[2][1] + A.m[2][3] * B.m[3][1],
; 174  :         A.m[2][0] * B.m[0][2] + A.m[2][1] * B.m[1][2] + A.m[2][2] * B.m[2][2] + A.m[2][3] * B.m[3][2],
; 175  :         A.m[2][0] * B.m[0][3] + A.m[2][1] * B.m[1][3] + A.m[2][2] * B.m[2][3] + A.m[2][3] * B.m[3][3],
; 176  :         A.m[3][0] * B.m[0][0] + A.m[3][1] * B.m[1][0] + A.m[3][2] * B.m[2][0] + A.m[3][3] * B.m[3][0],
; 177  :         A.m[3][0] * B.m[0][1] + A.m[3][1] * B.m[1][1] + A.m[3][2] * B.m[2][1] + A.m[3][3] * B.m[3][1],
; 178  :         A.m[3][0] * B.m[0][2] + A.m[3][1] * B.m[1][2] + A.m[3][2] * B.m[2][2] + A.m[3][3] * B.m[3][2],
; 179  :         A.m[3][0] * B.m[0][3] + A.m[3][1] * B.m[1][3] + A.m[3][2] * B.m[2][3] + A.m[3][3] * B.m[3][3],
; 180  :     };
; 181  :     
; 182  :     *OutMat = Result;

  01383	48 8d 04 24	 lea	 rax, QWORD PTR Result$[rsp]
  01387	48 8b 7c 24 70	 mov	 rdi, QWORD PTR OutMat$[rsp]
  0138c	48 8b f0	 mov	 rsi, rax
  0138f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  01394	f3 a4		 rep movsb

; 183  : }

  01396	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0139b	48 33 cc	 xor	 rcx, rsp
  0139e	e8 00 00 00 00	 call	 __security_check_cookie
  013a3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  013a7	5f		 pop	 rdi
  013a8	5e		 pop	 rsi
  013a9	c3		 ret	 0
Mat4Multiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Result$ = 0
__$ArrayPad$ = 64
__$ReturnAddress$ = 112
Mat4Identity PROC

; 147  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 148  :     mat4 Result =

  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00022	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0
  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	f3 0f 11 44 24
	04		 movss	 DWORD PTR Result$[rsp+4], xmm0
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	f3 0f 11 44 24
	08		 movss	 DWORD PTR Result$[rsp+8], xmm0
  00039	0f 57 c0	 xorps	 xmm0, xmm0
  0003c	f3 0f 11 44 24
	0c		 movss	 DWORD PTR Result$[rsp+12], xmm0
  00042	0f 57 c0	 xorps	 xmm0, xmm0
  00045	f3 0f 11 44 24
	10		 movss	 DWORD PTR Result$[rsp+16], xmm0
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00053	f3 0f 11 44 24
	14		 movss	 DWORD PTR Result$[rsp+20], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 44 24
	18		 movss	 DWORD PTR Result$[rsp+24], xmm0
  00062	0f 57 c0	 xorps	 xmm0, xmm0
  00065	f3 0f 11 44 24
	1c		 movss	 DWORD PTR Result$[rsp+28], xmm0
  0006b	0f 57 c0	 xorps	 xmm0, xmm0
  0006e	f3 0f 11 44 24
	20		 movss	 DWORD PTR Result$[rsp+32], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 44 24
	24		 movss	 DWORD PTR Result$[rsp+36], xmm0
  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00085	f3 0f 11 44 24
	28		 movss	 DWORD PTR Result$[rsp+40], xmm0
  0008b	0f 57 c0	 xorps	 xmm0, xmm0
  0008e	f3 0f 11 44 24
	2c		 movss	 DWORD PTR Result$[rsp+44], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 44 24
	30		 movss	 DWORD PTR Result$[rsp+48], xmm0
  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	f3 0f 11 44 24
	34		 movss	 DWORD PTR Result$[rsp+52], xmm0
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 44 24
	38		 movss	 DWORD PTR Result$[rsp+56], xmm0
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 44 24
	3c		 movss	 DWORD PTR Result$[rsp+60], xmm0

; 149  :     {
; 150  :         1.0f, 0.0f, 0.0f, 0.0f,
; 151  :         0.0f, 1.0f, 0.0f, 0.0f,
; 152  :         0.0f, 0.0f, 1.0f, 0.0f,
; 153  :         0.0f, 0.0f, 0.0f, 1.0f
; 154  :     };
; 155  :     
; 156  :     return(Result);

  000bd	48 8d 04 24	 lea	 rax, QWORD PTR Result$[rsp]
  000c1	48 8b 7c 24 70	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000c6	48 8b f0	 mov	 rsi, rax
  000c9	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000ce	f3 a4		 rep movsb
  000d0	48 8b 44 24 70	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 157  : }

  000d5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000da	48 33 cc	 xor	 rcx, rsp
  000dd	e8 00 00 00 00	 call	 __security_check_cookie
  000e2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e6	5f		 pop	 rdi
  000e7	5e		 pop	 rsi
  000e8	c3		 ret	 0
Mat4Identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Result$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
Vec$ = 72
Scale$ = 80
V4Scale	PROC

; 129  : {

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 44 24 10	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     v4 Result;
; 131  :     Result.x = Vec.x*Scale;

  00025	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  0002a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0002e	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  00034	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 132  :     Result.y = Vec.y*Scale;

  00039	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  0003e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00043	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  00049	f3 0f 11 44 24
	04		 movss	 DWORD PTR Result$[rsp+4], xmm0

; 133  :     Result.z = Vec.z*Scale;

  0004f	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  00054	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00059	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  0005f	f3 0f 11 44 24
	08		 movss	 DWORD PTR Result$[rsp+8], xmm0

; 134  :     Result.w = Vec.w*Scale;

  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  0006a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  0006f	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  00075	f3 0f 11 44 24
	0c		 movss	 DWORD PTR Result$[rsp+12], xmm0

; 135  :     
; 136  :     return(Result);

  0007b	48 8d 04 24	 lea	 rax, QWORD PTR Result$[rsp]
  0007f	48 8b 7c 24 40	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 10 00 00 00	 mov	 ecx, 16
  0008c	f3 a4		 rep movsb
  0008e	48 8b 44 24 40	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 137  : }

  00093	48 8b 4c 24 10	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00098	48 33 cc	 xor	 rcx, rsp
  0009b	e8 00 00 00 00	 call	 __security_check_cookie
  000a0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a4	5f		 pop	 rdi
  000a5	5e		 pop	 rsi
  000a6	c3		 ret	 0
V4Scale	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Result$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
A$ = 72
B$ = 80
V4Add	PROC

; 117  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 44 24 10	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 118  :     v4 Result;
; 119  :     Result.x = A.x + B.x;

  00024	48 8b 44 24 48	 mov	 rax, QWORD PTR A$[rsp]
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR B$[rsp]
  0002e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00032	f3 0f 58 01	 addss	 xmm0, DWORD PTR [rcx]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 120  :     Result.y = A.y + B.y;

  0003b	48 8b 44 24 48	 mov	 rax, QWORD PTR A$[rsp]
  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR B$[rsp]
  00045	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  0004a	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [rcx+4]
  0004f	f3 0f 11 44 24
	04		 movss	 DWORD PTR Result$[rsp+4], xmm0

; 121  :     Result.z = A.z + B.z;

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR A$[rsp]
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR B$[rsp]
  0005f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00064	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [rcx+8]
  00069	f3 0f 11 44 24
	08		 movss	 DWORD PTR Result$[rsp+8], xmm0

; 122  :     Result.w = A.w + B.w;

  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR A$[rsp]
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR B$[rsp]
  00079	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [rax+12]
  0007e	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [rcx+12]
  00083	f3 0f 11 44 24
	0c		 movss	 DWORD PTR Result$[rsp+12], xmm0

; 123  :     
; 124  :     return(Result);

  00089	48 8d 04 24	 lea	 rax, QWORD PTR Result$[rsp]
  0008d	48 8b 7c 24 40	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00092	48 8b f0	 mov	 rsi, rax
  00095	b9 10 00 00 00	 mov	 ecx, 16
  0009a	f3 a4		 rep movsb
  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 125  : }

  000a1	48 8b 4c 24 10	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000a6	48 33 cc	 xor	 rcx, rsp
  000a9	e8 00 00 00 00	 call	 __security_check_cookie
  000ae	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b2	5f		 pop	 rdi
  000b3	5e		 pop	 rsi
  000b4	c3		 ret	 0
V4Add	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
K$ = 32
Length$ = 36
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
Result$ = 112
__$ArrayPad$ = 128
__$ReturnAddress$ = 176
Vec$ = 184
V3Normalize PROC

; 88   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 89   :     f32 Length = V3Length(Vec);

  00025	48 8d 44 24 30	 lea	 rax, QWORD PTR $T1[rsp]
  0002a	48 8b f8	 mov	 rdi, rax
  0002d	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR Vec$[rsp]
  00035	b9 0c 00 00 00	 mov	 ecx, 12
  0003a	f3 a4		 rep movsb
  0003c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T1[rsp]
  00041	e8 00 00 00 00	 call	 V3Length
  00046	f3 0f 11 44 24
	24		 movss	 DWORD PTR Length$[rsp], xmm0

; 90   :     
; 91   :     f32 K = 0.0f;

  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 44 24
	20		 movss	 DWORD PTR K$[rsp], xmm0

; 92   :     if(Length != 0)

  00055	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR Length$[rsp]
  0005b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00062	7a 02		 jp	 SHORT $LN4@V3Normaliz
  00064	74 36		 je	 SHORT $LN2@V3Normaliz
$LN4@V3Normaliz:

; 93   :     {
; 94   :         K = 1.0f / V3Length(Vec);

  00066	48 8d 44 24 40	 lea	 rax, QWORD PTR $T2[rsp]
  0006b	48 8b f8	 mov	 rdi, rax
  0006e	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR Vec$[rsp]
  00076	b9 0c 00 00 00	 mov	 ecx, 12
  0007b	f3 a4		 rep movsb
  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  00082	e8 00 00 00 00	 call	 V3Length
  00087	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0008f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00093	0f 28 c1	 movaps	 xmm0, xmm1
  00096	f3 0f 11 44 24
	20		 movss	 DWORD PTR K$[rsp], xmm0
$LN2@V3Normaliz:

; 95   :     }
; 96   :     
; 97   :     v3 Result = V3Scale(Vec, K);

  0009c	48 8d 44 24 50	 lea	 rax, QWORD PTR $T3[rsp]
  000a1	48 8b f8	 mov	 rdi, rax
  000a4	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR Vec$[rsp]
  000ac	b9 0c 00 00 00	 mov	 ecx, 12
  000b1	f3 a4		 rep movsb
  000b3	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR K$[rsp]
  000b9	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T3[rsp]
  000be	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T4[rsp]
  000c3	e8 00 00 00 00	 call	 V3Scale
  000c8	48 8d 4c 24 70	 lea	 rcx, QWORD PTR Result$[rsp]
  000cd	48 8b f9	 mov	 rdi, rcx
  000d0	48 8b f0	 mov	 rsi, rax
  000d3	b9 0c 00 00 00	 mov	 ecx, 12
  000d8	f3 a4		 rep movsb

; 98   :     return(Result);

  000da	48 8d 44 24 70	 lea	 rax, QWORD PTR Result$[rsp]
  000df	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000e7	48 8b f0	 mov	 rsi, rax
  000ea	b9 0c 00 00 00	 mov	 ecx, 12
  000ef	f3 a4		 rep movsb
  000f1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 99   : }

  000f9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00101	48 33 cc	 xor	 rcx, rsp
  00104	e8 00 00 00 00	 call	 __security_check_cookie
  00109	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00110	5f		 pop	 rdi
  00111	5e		 pop	 rsi
  00112	c3		 ret	 0
V3Normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Mult$ = 32
Result$ = 36
$T1 = 48
$T2 = 64
Vec$ = 112
V3Length PROC

; 74   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 75   :     f32 Mult = V3MultiplyDot(Vec, Vec);

  0000b	48 8d 44 24 30	 lea	 rax, QWORD PTR $T1[rsp]
  00010	48 8b f8	 mov	 rdi, rax
  00013	48 8b 74 24 70	 mov	 rsi, QWORD PTR Vec$[rsp]
  00018	b9 0c 00 00 00	 mov	 ecx, 12
  0001d	f3 a4		 rep movsb
  0001f	48 8d 44 24 40	 lea	 rax, QWORD PTR $T2[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	48 8b 74 24 70	 mov	 rsi, QWORD PTR Vec$[rsp]
  0002c	b9 0c 00 00 00	 mov	 ecx, 12
  00031	f3 a4		 rep movsb
  00033	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T1[rsp]
  00038	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  0003d	e8 00 00 00 00	 call	 V3MultiplyDot
  00042	f3 0f 11 44 24
	20		 movss	 DWORD PTR Mult$[rsp], xmm0

; 76   :     
; 77   :     f32 Result = 0.0f;

  00048	0f 57 c0	 xorps	 xmm0, xmm0
  0004b	f3 0f 11 44 24
	24		 movss	 DWORD PTR Result$[rsp], xmm0

; 78   :     if(Mult != 0)

  00051	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR Mult$[rsp]
  00057	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0005e	7a 02		 jp	 SHORT $LN4@V3Length
  00060	74 11		 je	 SHORT $LN2@V3Length
$LN4@V3Length:

; 79   :     {
; 80   :         Result = sqrtf(Mult);

  00062	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR Mult$[rsp]
  00068	e8 00 00 00 00	 call	 sqrtf
  0006d	f3 0f 11 44 24
	24		 movss	 DWORD PTR Result$[rsp], xmm0
$LN2@V3Length:

; 81   :     }
; 82   :     
; 83   :     return(Result);

  00073	f3 0f 10 44 24
	24		 movss	 xmm0, DWORD PTR Result$[rsp]

; 84   : }

  00079	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007d	5f		 pop	 rdi
  0007e	5e		 pop	 rsi
  0007f	c3		 ret	 0
V3Length ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Result$ = 0
A$ = 32
B$ = 40
V3MultiplyDot PROC

; 67   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 68   :     f32 Result = A.x*B.x + A.y*B.y + A.z*B.z;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR A$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR B$[rsp]
  00018	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0001c	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [rcx]
  00020	48 8b 44 24 20	 mov	 rax, QWORD PTR A$[rsp]
  00025	48 8b 4c 24 28	 mov	 rcx, QWORD PTR B$[rsp]
  0002a	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [rax+4]
  0002f	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [rcx+4]
  00034	f3 0f 58 c1	 addss	 xmm0, xmm1
  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR A$[rsp]
  0003d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR B$[rsp]
  00042	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00047	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [rcx+8]
  0004c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00050	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 69   :     return(Result);

  00055	f3 0f 10 04 24	 movss	 xmm0, DWORD PTR Result$[rsp]

; 70   : }

  0005a	48 83 c4 18	 add	 rsp, 24
  0005e	c3		 ret	 0
V3MultiplyDot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File W:\BLib\src\BMath.h
_TEXT	SEGMENT
Result$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
Vec$ = 72
Scale$ = 80
V3Scale	PROC

; 45   : {

  00000	f3 0f 11 54 24
	18		 movss	 DWORD PTR [rsp+24], xmm2
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 44 24 10	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 46   :     v3 Result;
; 47   :     Result.x = Vec.x*Scale;

  00025	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  0002a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  0002e	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  00034	f3 0f 11 04 24	 movss	 DWORD PTR Result$[rsp], xmm0

; 48   :     Result.y = Vec.y*Scale;

  00039	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  0003e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [rax+4]
  00043	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  00049	f3 0f 11 44 24
	04		 movss	 DWORD PTR Result$[rsp+4], xmm0

; 49   :     Result.z = Vec.z*Scale;

  0004f	48 8b 44 24 48	 mov	 rax, QWORD PTR Vec$[rsp]
  00054	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00059	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR Scale$[rsp]
  0005f	f3 0f 11 44 24
	08		 movss	 DWORD PTR Result$[rsp+8], xmm0

; 50   :     
; 51   :     return(Result);

  00065	48 8d 04 24	 lea	 rax, QWORD PTR Result$[rsp]
  00069	48 8b 7c 24 40	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006e	48 8b f0	 mov	 rsi, rax
  00071	b9 0c 00 00 00	 mov	 ecx, 12
  00076	f3 a4		 rep movsb
  00078	48 8b 44 24 40	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 52   : }

  0007d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00082	48 33 cc	 xor	 rcx, rsp
  00085	e8 00 00 00 00	 call	 __security_check_cookie
  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	5f		 pop	 rdi
  0008f	5e		 pop	 rsi
  00090	c3		 ret	 0
V3Scale	ENDP
_TEXT	ENDS
END
